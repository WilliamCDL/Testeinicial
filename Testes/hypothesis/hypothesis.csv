Filename;Linha;Tipo;Autor;Email;Data;Hash;Commit
statefultesting.py;45;ADD;David R. MacIver;david@drmaciver.com;2013-03-20 09:47:29+00:00;9b0795aeeed77b594ea47f0d422ed6c357e522bc;"This is a very crude sketch of how stateful testing might work with hypothesis.  It's not even close to finished, but it at least demonstrates the basic concept of how it might work."
statefultesting.py;46;ADD;David R. MacIver;david@drmaciver.com;2013-03-20 11:52:35+00:00;38c6f2721362caa02d0695792e22ec37b6519f4c;"Much more clever argument minimization for stateful testing"
statefultesting.py;62;DELETED;David R. MacIver;david@drmaciver.com;2013-03-20 11:52:35+00:00;38c6f2721362caa02d0695792e22ec37b6519f4c;""
specmapper.py;7;ADD;David R. MacIver;david@drmaciver.com;2013-03-21 08:20:07+00:00;fa8d75fba0dfac1aa35ce8b8b9943dde4e2d27a9;"starting to factor out the producers/simplifiers logic into its own thing"
specmapper.py;49;ADD;David R. MacIver;david@drmaciver.com;2013-03-23 15:31:35+00:00;66706a8bba77958e4ed6e475e73a5b3b6807da53;"Add overriding to my object model. This is a bit ridiculous"
specmapper.py;64;ADD;David R. MacIver;david@drmaciver.com;2013-03-23 16:40:30+00:00;48d7e3b7cd0185da6ba56b56ad04731def1b575b;"Merge branch 'strategize'"
descriptorkey.py;21;ADD;David R. MacIver;david@drmaciver.com;2013-03-26 08:24:39+00:00;6cb5b981a8515ecb4c6cf2b293d8b82263b20ad4;"some more work on supporting recursive descriptors properly"
descriptorkey.py;21;DELETED;David R. MacIver;david@drmaciver.com;2013-03-26 19:17:19+00:00;684ef5015c5c39dc3489c7d223a55145b01d4823;"Revert "some more work on supporting recursive descriptors properly"  This reverts commit 6cb5b981a8515ecb4c6cf2b293d8b82263b20ad4."
reflection.py;130;ADD;David R. MacIver;david@drmaciver.com;2015-01-10 12:04:34+00:00;80ff401279a249c73331208153cb7a8d0de1f9fc;"You see the lengths I go to for you people?"
test_testdecorators.py;214;ADD;David R. MacIver;david@drmaciver.com;2015-01-12 19:35:15+00:00;d02c1064499811807d80904ec8e477f4787b323f;"Copy arguments before passing them to hypotheses  The problem is that data may be mutable, and previously Hypothesis was just assuming that it would not be mutated. If this assumption was falsified then it would *sometimes* be detected by Hypothesis' s flakiness detection but not always, and even then it was not entirely obvious what was going on because the data would have been changed and thus so would the repr.  This commit introduces two concepts:    1. A strategy has a has_immutable_data property which is True if      all data reachable from a value produced by this strategy is      immutable and thus you don't need to worry.   2. A strategy also has a copy method. If has_immutable_data is      True then copying just returns its value, otherwise it calls      deepcopy. Note that deepcopy also has some optimisations for      immutable data, but we have the advantage here that we can      calculate it once without doing the O(n) cost incurred by      deepcopy so in these cases it should be a lot faster.  This fixes https://github.com/DRMacIver/hypothesis/issues/19"
test_testdecorators.py;214;ADD;David R. MacIver;david@drmaciver.com;2015-01-13 08:19:26+01:00;5e83398ac3b47ffb756b865b7b2202f364dabf7f;"Merge branch '0.3.x'"
reflection.py;27;ADD;David R. MacIver;david@drmaciver.com;2015-01-14 21:45:47+01:00;fb24ab4113bdef9adf8411e9c86bec9d51389b08;"Provide a "derandomized" mode  This allows you to run hypothesis without any real randomness. Instead it derives a pseudorandom number generator from the function you're testing. This should have stable behaviour across multiple runs.  The upside of this is you can run with a guarantee of no spurious failures. The downside of this is that you are less likely to discover bugs where they have rare occurrences. Also, apparently irrelevant changes to your source code may cause failures where none occurred before. In practice I expect this is still useful."
database.py;401;ADD;David R. MacIver;david@drmaciver.com;2015-01-16 21:00:03+01:00;7b11e2392dbd7f9001554dcaefdb37a8434f9eef;"A prototype of a storage and serialization layer  This is at the moment entirely useless. It understands how to convert all supported types to json-like objects which can then be marshalled to and from json. It implements a prototype in memory storage layer that will have *some* use but is mostly of interest for testing purposes and will likely not be available in the final production version.  It does however contain what is probably pretty close to the final form of the APIs. The serialization framework seems to work rather well and the storage interface appears to be basically correct although may need some tinkering with later."
backend.py;57;ADD;David R. MacIver;david@drmaciver.com;2015-01-17 20:06:40+01:00;da3396740a5188ed7b27ece4196c8673c6fedd3c;"Add an sqlite3 backend.  This is intended to be the one actually used for real. It's a very convenient file format that is nicely portable, widely readable and is available wherever python is found. A++"
verifier.py;76;ADD;David R. MacIver;david@drmaciver.com;2015-01-17 22:31:06+01:00;a844dcbbbee3fd8dd764442d0f9d1e9c618015f1;"Provide an opt out method for serialization  Serializing descriptors would require either    a) A full without-specific serialization protocol which I didn't want to do   b) Using pickle, which is horrendously insecure and nope.  So I didn't really want to do it. On the assumption that other people will run into this problem as well I made it a general mechanism. A type can explicitly mark itself as not serializable, at which point the verifier won't try to serialize it.  This does of course mean you won't be able to reuse previous examples. Use this feature with caution."
fixers.py;44;ADD;David R. MacIver;david@drmaciver.com;2015-01-20 17:07:42+01:00;44e9ab1fee105093f40a27c40f204acb127b0184;"This commit is bad and I should feel bad."
__init__.py;75;ADD;David R. MacIver;david@drmaciver.com;2015-01-21 10:36:29+01:00;3890014ac20124aa574c4be1a139dd2290c7849c;"Merge branch '0.4.x'"
backend.py;61;ADD;David R. MacIver;david@drmaciver.com;2015-01-21 10:36:29+01:00;3890014ac20124aa574c4be1a139dd2290c7849c;""
fixers.py;43;ADD;David R. MacIver;david@drmaciver.com;2015-01-21 10:36:29+01:00;3890014ac20124aa574c4be1a139dd2290c7849c;""
verifier.py;76;ADD;David R. MacIver;david@drmaciver.com;2015-01-21 10:36:29+01:00;3890014ac20124aa574c4be1a139dd2290c7849c;""
test_converter.py;111;ADD;David R. MacIver;david@drmaciver.com;2015-01-21 11:42:36+01:00;0d8f6fe5b48c3b3ef6f3d1d2e4560c28740aada0;"Validate data as it comes out of the database  This can't catch all cases where the wrong data is put into the database because the stored data is not self-describing. It does however ensure we don't get embarrassing internal exceptions and can recover from malformed data more readily."
specmapper.py;77;ADD;David R. MacIver;david@drmaciver.com;2015-01-31 18:19:17+01:00;54c7ca03593fe5e00439e70957e1deb5e6c5611f;"Augment strategies with values from the database  Idea: If there are values in the database for a descriptor then sometimes we should use those.  This allows us to reuse parts of other examples we've found in other tests in building up our new examples. e.g. if the number 42 has turned out to be interesting then as awell as reusing that for int examples we can also construct the list [42] more readily, or the tuple (42, 3) (or even the tuple (42, 42))  This also makes preseeding the database with interesting values a much more attractive proposition. Previously because all the descriptors we store in the database are of the form ((args), {kwargs}) it would have been rather awkward."
specmapper.py;28;ADD;David R. MacIver;david@drmaciver.com;2015-02-02 00:25:49+01:00;a1b92090c1774a0f0423b917058683a3a07d48ff;"SpecMapper inheritance of defaults was bad  If you called SpecificationMapper.default() then this would become the default for all subclasses if they hadn't already been called.  I'm not sure what the correct semantics for this *should* be, but it's definitely not that.  I don't think this ever caused any problems because of how internal this thing is, but ugh."
test_fixer.py;196;ADD;David R. MacIver;david@drmaciver.com;2015-02-02 13:34:13+01:00;574f4452d9904da1c49b691dffb1b6deb742f312;"More thorough testing around actually_equal  This didn't find any bugs. I'm suspicious."
classmap.py;12;ADD;David R. MacIver;david@drmaciver.com;2015-02-02 15:20:52+01:00;3b1b02a4bf4bd13e30944de50e233c7d01bbb3d9;"Start of new implementation  ClassMap is a dict that uses parent classes if set when accessed from a subclass."
fixers.py;62;DELETED;David R. MacIver;david@drmaciver.com;2015-02-02 15:41:54+01:00;8b9aa565dc19d6f30fe0b8cc82ecbd10e231f790;"Rebuild fixer equality on top of ClassMap  Add the idea of an ExtMethod. These are simply methods where you give them an explicit class key and they look up an implementation.  They're not very clever but they are helpful."
searchstrategy.py;96;DELETED;David R. MacIver;david@drmaciver.com;2015-02-02 15:57:46+01:00;940d4d73e731da863902235f1b3a64f726056bbd;"Move nice_string to fixers and rebuild"
classmap.py;9;ADD;David R. MacIver;david@drmaciver.com;2015-02-02 16:14:25+01:00;bfe467a0d8011ce1027d9482069d84a383d3f687;"Rebuild SpecificationMapper on top of ClassMap"
classmap.py;12;DELETED;David R. MacIver;david@drmaciver.com;2015-02-02 16:14:25+01:00;bfe467a0d8011ce1027d9482069d84a383d3f687;""
fixers.py;26;ADD;David R. MacIver;david@drmaciver.com;2015-02-02 16:25:24+01:00;5504410c85e0133bdc80fc735fd3dbf2c1cee24b;"Restore actually_equal collection special case"
fixers.py;33;ADD;David R. MacIver;david@drmaciver.com;2015-02-02 16:25:24+01:00;5504410c85e0133bdc80fc735fd3dbf2c1cee24b;""
hashitanyway.py;27;ADD;David R. MacIver;david@drmaciver.com;2015-02-02 22:53:09+01:00;b447abe26642da323101498a159adc9dc422b482;"Use collection hashing logic for all collections  This is mostly to achieve consistency with actually_equal in these cases. Otherwise we have cases where two things may be actually_equal but hash to different things."
classmap.py;10;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 09:33:32+01:00;3059546a19bc8619a209f005f08fc1a5b3e2c730;"Merge branch '0.4.x'"
specmapper.py;28;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 09:33:32+01:00;3059546a19bc8619a209f005f08fc1a5b3e2c730;""
fixers.py;26;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 09:33:32+01:00;3059546a19bc8619a209f005f08fc1a5b3e2c730;""
fixers.py;33;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 09:33:32+01:00;3059546a19bc8619a209f005f08fc1a5b3e2c730;""
fixers.py;43;DELETED;David R. MacIver;david@drmaciver.com;2015-02-04 09:33:32+01:00;3059546a19bc8619a209f005f08fc1a5b3e2c730;""
hashitanyway.py;27;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 09:33:32+01:00;3059546a19bc8619a209f005f08fc1a5b3e2c730;""
searchstrategy.py;66;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 09:33:32+01:00;3059546a19bc8619a209f005f08fc1a5b3e2c730;""
searchstrategy.py;358;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 09:33:32+01:00;3059546a19bc8619a209f005f08fc1a5b3e2c730;""
searchstrategy.py;72;DELETED;David R. MacIver;david@drmaciver.com;2015-02-04 09:33:32+01:00;3059546a19bc8619a209f005f08fc1a5b3e2c730;""
test_fixer.py;196;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 09:33:32+01:00;3059546a19bc8619a209f005f08fc1a5b3e2c730;""
__init__.py;69;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 11:26:19+01:00;3fae01c7c7bfd466b3e2fa339330dbaaa78b4b16;"Add simplification rules for datetime  Define simplification behaviour:  * Hours, minutes, seconds, microseconds are all simplest at 0. * Days are simpler closer to the month. * Months are simpler towards January. * Years are simpler towards 2000."
__init__.py;75;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 11:26:19+01:00;3fae01c7c7bfd466b3e2fa339330dbaaa78b4b16;""
__init__.py;83;ADD;David R. MacIver;david@drmaciver.com;2015-02-04 11:26:19+01:00;3fae01c7c7bfd466b3e2fa339330dbaaa78b4b16;""
__init__.py;95;DELETED;David R. MacIver;david@drmaciver.com;2015-02-04 15:16:47+01:00;9a41c67f8d1d1f730296b2e4e172aa011d951a68;"Also require full coverage for hypothesis-extra  This required a bit of rejigging of the structure of the package and a few extra tests."
conftest.py;10;ADD;David R. MacIver;david@drmaciver.com;2015-02-05 22:08:06+01:00;cbe108f80d93f13d2d40ee529c8551ea22c01d1b;"The resource module is not available on windows"
conftest.py;10;ADD;David R. MacIver;david@drmaciver.com;2015-02-06 11:28:53+01:00;66e7525599bcdf9b0b66b32d24e48503e6be69eb;"Merge branch 'windows_support'  Conflicts: 	src/hypothesis/verifier.py"
searchstrategy.py;112;ADD;David R. MacIver;david@drmaciver.com;2015-02-06 13:14:27+01:00;e03797286b95c4028d671f3a284a6adc6f6e149d;"Support for overriding copy methods sensibly."
searchstrategy.py;112;ADD;David R. MacIver;david@drmaciver.com;2015-02-06 21:14:37+01:00;577f66e28f786c08c29e418b50ba2f79a0ba0c04;"Merge branch 'support_custom_copies'"
__init__.py;30;ADD;David R. MacIver;david@drmaciver.com;2015-02-07 10:06:56+01:00;d82c4c07765608c45850aa3b922405d537c7a23b;"Probe for max day without checking error message"
reflection.py;288;ADD;David R. MacIver;david@drmaciver.com;2015-02-05 11:14:57+01:00;334e0eddc83448ab5bbe9f577e543919ab4ffe9d;"Eval functions in a way that retains their source  Current list of core python functionality reimplemented:    * Equality   * Hashing   * repr   * exec  What am I doing with my life?"
filestorage.py;14;ADD;David R. MacIver;david@drmaciver.com;2015-02-05 17:55:51+01:00;f7256ff4e8551920b4b80f603bbe78927abf7a8d;"Heading towards more robust @given  Unfortunately creating temp files and then deleting them breaks coverage, so we need to put them in a stable location. We build the paths by hashing, so this shouldn't create a constant stream of new files.  Better testing of things.  Fix some wrong tests."
__init__.py;42;DELETED;David R. MacIver;david@drmaciver.com;2015-02-21 17:55:38+01:00;c5a7089b44deab08ce9345402351fa3aa2c2918b;"Initial model introspection and generation  This introduces the extreme basics of automatically generating your Django models for you.  It currently does not support the full range of fields and will not work if you have non-nullable foreign keys. It also does no simplification. It should be considered a sketch of the end result rather than something that is ready for use.  But it works! Yay!"
__init__.py;141;DELETED;David R. MacIver;david@drmaciver.com;2015-02-21 17:55:38+01:00;c5a7089b44deab08ce9345402351fa3aa2c2918b;""
__init__.py;150;DELETED;David R. MacIver;david@drmaciver.com;2015-02-21 17:55:38+01:00;c5a7089b44deab08ce9345402351fa3aa2c2918b;""
datetime.py;50;ADD;David R. MacIver;david@drmaciver.com;2015-02-21 17:55:38+01:00;c5a7089b44deab08ce9345402351fa3aa2c2918b;""
datetime.py;187;ADD;David R. MacIver;david@drmaciver.com;2015-02-21 17:55:38+01:00;c5a7089b44deab08ce9345402351fa3aa2c2918b;""
datetime.py;196;ADD;David R. MacIver;david@drmaciver.com;2015-02-21 17:55:38+01:00;c5a7089b44deab08ce9345402351fa3aa2c2918b;""
statefultesting.py;94;DELETED;David R. MacIver;david@drmaciver.com;2015-02-22 14:33:44+01:00;6845e14b4a7ae53975e4dd19c897627affb99e17;"Remove stateful testing  This was kinda incoherent as it stood and had never been well supported in the API. Something like it but better will return post 1.0."
descriptortests.py;116;ADD;David R. MacIver;david@drmaciver.com;2015-02-23 15:56:57+01:00;71fc449c51f017a01d3526b1987a09147f3dcf27;"Major API redesign and rewrite  This commit is basically about taking the separation between templates and values seriously. Templates now look much less like the values they reify to. This allows us to drop a bunch of cruft. In particular could_have_produced is now dead: It's a logical error to pass a template to a strategy that did not produce it, and we can encode additional information into the template to make sure that this invariant is preserved.  In the course of doing so I realised that because templates were now such an internal facet of strategies that it didn't make sense to have converters separate from strategies, and keeping them separate was creating lots of hairy bugs that were hard to track down, so I merged the two.  This work isn't even close to done but this commit was large enough as it is. This basically gets it to the point where the main tests pass without running in database mode. I expect I've lost a lot of coverage (many tests were deleted because they don't make any sense now), database mode is unlikely to be fully operational, and I haven't even started fixing the hypothesis-extra packages."
searchstrategy.py;130;DELETED;David R. MacIver;david@drmaciver.com;2015-02-23 15:56:57+01:00;71fc449c51f017a01d3526b1987a09147f3dcf27;""
verifier.py;109;DELETED;David R. MacIver;david@drmaciver.com;2015-02-23 15:56:57+01:00;71fc449c51f017a01d3526b1987a09147f3dcf27;""
test_converter.py;137;DELETED;David R. MacIver;david@drmaciver.com;2015-02-23 15:56:57+01:00;71fc449c51f017a01d3526b1987a09147f3dcf27;""
test_testdecorators.py;365;ADD;David R. MacIver;david@drmaciver.com;2015-02-25 11:17:22+01:00;e2275464013cce8dfa370b5c52c874b1b6a64f26;"Get back to 100% test coverage."
__init__.py;115;DELETED;David R. MacIver;david@drmaciver.com;2015-02-26 11:30:43+01:00;3db02c78dd65de02edf115a9266a2f522401a107;"Split up strategytable into a bunch of submodules.  The file was getting ridiculously huge. This breaks it up into a bunch of smaller files.  This isn't really intended as a semantic change, though it does have the nice side effect of giving searchstrategy a much better defined API  This commit also moves where the definitions of mapping strategies to descriptors happens to the individual modules where the strategies are designed. This is partly for consistency with how things work in hypothesis-extra, partly as prep for future refactoring of how the whole StrategyTable stuff works."
__init__.py;431;DELETED;David R. MacIver;david@drmaciver.com;2015-02-26 11:30:43+01:00;3db02c78dd65de02edf115a9266a2f522401a107;""
collections.py;67;ADD;David R. MacIver;david@drmaciver.com;2015-02-26 11:30:43+01:00;3db02c78dd65de02edf115a9266a2f522401a107;""
numbers.py;195;ADD;David R. MacIver;david@drmaciver.com;2015-02-26 11:30:43+01:00;3db02c78dd65de02edf115a9266a2f522401a107;""
extmethod.py;51;ADD;David R. MacIver;david@drmaciver.com;2015-02-26 12:57:04+01:00;71df57d0fac64c2349e34d1b47669b31b2be1c84;"add static option to extmethod and make it public"
specmapper.py;44;DELETED;David R. MacIver;david@drmaciver.com;2015-02-26 17:16:15+01:00;f692ee2a972f641660adb4ee37e1579baf239372;"Significantly more elaborate settings  The goal here is to allow strategies to define settings and to use them in setting themselves up. This will let verifiers work with smaller strategies if desired.  Right now though this is just a refactoring which achieves more or less the same behaviour as before but with more code.  Conflicts:  	src/hypothesis/internal/specmapper.py"
specmapper.py;54;DELETED;David R. MacIver;david@drmaciver.com;2015-02-26 17:16:15+01:00;f692ee2a972f641660adb4ee37e1579baf239372;""
specmapper.py;106;DELETED;David R. MacIver;david@drmaciver.com;2015-02-26 17:16:15+01:00;f692ee2a972f641660adb4ee37e1579baf239372;""
specmapper.py;117;DELETED;David R. MacIver;david@drmaciver.com;2015-02-26 17:16:15+01:00;f692ee2a972f641660adb4ee37e1579baf239372;""
test_settings.py;29;ADD;David R. MacIver;david@drmaciver.com;2015-02-26 17:16:15+01:00;f692ee2a972f641660adb4ee37e1579baf239372;""
extmethod.py;51;ADD;David R. MacIver;david@drmaciver.com;2015-03-13 15:06:44+01:00;6a156fea8e430d3f345b4c0428bb23301487d3dc;"Merge branch 'delete_specification_mapper'"
specmapper.py;44;DELETED;David R. MacIver;david@drmaciver.com;2015-03-13 15:06:44+01:00;6a156fea8e430d3f345b4c0428bb23301487d3dc;""
specmapper.py;54;DELETED;David R. MacIver;david@drmaciver.com;2015-03-13 15:06:44+01:00;6a156fea8e430d3f345b4c0428bb23301487d3dc;""
specmapper.py;106;DELETED;David R. MacIver;david@drmaciver.com;2015-03-13 15:06:44+01:00;6a156fea8e430d3f345b4c0428bb23301487d3dc;""
specmapper.py;117;DELETED;David R. MacIver;david@drmaciver.com;2015-03-13 15:06:44+01:00;6a156fea8e430d3f345b4c0428bb23301487d3dc;""
test_settings.py;29;ADD;David R. MacIver;david@drmaciver.com;2015-03-13 15:06:44+01:00;6a156fea8e430d3f345b4c0428bb23301487d3dc;""
filestorage.py;29;DELETED;David R. MacIver;david@drmaciver.com;2015-03-15 18:45:01+01:00;af365e4b5e235814af4572e1947357c3e1dd88ce;"Merge filestorage and settings. DB is on by default"
settings.py;38;ADD;David R. MacIver;david@drmaciver.com;2015-03-15 18:45:01+01:00;af365e4b5e235814af4572e1947357c3e1dd88ce;""
__init__.py;105;DELETED;David R. MacIver;david@drmaciver.com;2015-03-18 14:18:50+01:00;550570a2a880024e5ae42632c2ba62bf11b9b959;"Death to hashitanyway"
descriptortests.py;127;DELETED;David R. MacIver;david@drmaciver.com;2015-03-18 14:18:50+01:00;550570a2a880024e5ae42632c2ba62bf11b9b959;""
hashitanyway.py;84;DELETED;David R. MacIver;david@drmaciver.com;2015-03-18 14:18:50+01:00;550570a2a880024e5ae42632c2ba62bf11b9b959;""
fixers.py;55;DELETED;David R. MacIver;david@drmaciver.com;2015-03-18 14:30:29+01:00;b1c715c8aaf0ce3b2bd91a46a2f934dcbfc55eeb;"Delete actually_equal  I love deleting code so much."
test_fixer.py;216;DELETED;David R. MacIver;david@drmaciver.com;2015-03-18 14:30:29+01:00;b1c715c8aaf0ce3b2bd91a46a2f934dcbfc55eeb;""
backend.py;77;ADD;David R. MacIver;david@drmaciver.com;2015-03-18 21:41:52+01:00;e569c75f16bc6bd94e1e0c1df1396709385bbf41;"Use contextmanager to ensure cursors are closed"
backend.py;112;ADD;David R. MacIver;david@drmaciver.com;2015-03-18 21:41:52+01:00;e569c75f16bc6bd94e1e0c1df1396709385bbf41;""
backend.py;91;DELETED;David R. MacIver;david@drmaciver.com;2015-03-18 21:41:52+01:00;e569c75f16bc6bd94e1e0c1df1396709385bbf41;""
backend.py;77;DELETED;David R. MacIver;david@drmaciver.com;2015-03-19 13:41:37+01:00;76a8b442987bb854836d1268b6014365d204c586;"correctly roll back on error"
test_database_backend.py;46;ADD;David R. MacIver;david@drmaciver.com;2015-03-19 13:41:37+01:00;76a8b442987bb854836d1268b6014365d204c586;""
collections.py;67;DELETED;David R. MacIver;david@drmaciver.com;2015-03-28 15:42:45+01:00;dfa1fa499500175b3ec0bade6dee3493bb23178a;"Introduce the concept of multistage simplification  This improves simplification performance a lot in some cases while not hurting quality at all.  See internals docs for details."
test_example_quality.py;40;ADD;David R. MacIver;david@drmaciver.com;2015-03-28 19:25:51+01:00;4b55fca58cbfd543bba1c3866aafe7aeca9e994e;"Fixes to example quality tests    1. Don't swallow non-assertion errors   2. Convert filter result to list because otherwise you can't      test it for falsiness (the resulting generator is always true)"
test_execution_details.py;38;ADD;David R. MacIver;david@drmaciver.com;2015-03-31 22:34:41+02:00;82a8ee7238f29a73fcc69043cbe06a85a03d73e2;"This commit bundles a bunch of things  The main purpose of it is that it it moves the simplify API over to accepting a random number generator. However it also fixes a number of issues that were uncovered in the course of this.    1. Tracking is now shared between simplification and generation      so the same example is not tried twice that way. There is now      a relatively basic test to catch this behaviour.   2. strategy_test_suite has been expanded to catch a wider range of      simplification bugs.   3. Simplification of negative integers has been fixed. It was broken      because simplify_towards_zero was calling basic_simplify instead of      simplify_from_zero when called recursively on negative numbers.   4. A number of additional integer related quality tests to make sure      errors like that can't make it through again.   5. A number of replacements of xrange with hrange."
test_execution_details.py;38;DELETED;David R. MacIver;david@drmaciver.com;2015-04-01 09:59:38+02:00;e81877b5d66e9d701a835fd533116f172c20e0fa;"Turns out there are a bunch of cases where this is OK"
numbers.py;267;ADD;David R. MacIver;david@drmaciver.com;2015-04-01 15:34:40+02:00;db01178b00d26c05ac6553699ac8f47e3912389f;"More weird special casing and heuristics for float simplification"
numbers.py;264;DELETED;David R. MacIver;david@drmaciver.com;2015-04-01 15:34:40+02:00;db01178b00d26c05ac6553699ac8f47e3912389f;""
numbers.py;267;DELETED;David R. MacIver;david@drmaciver.com;2015-04-01 18:41:17+02:00;2ada473e96dfd3cac1f685e8061406d62a9f0c4c;"More work on floats.  In particular:  1. Ensure that we have quality examples covering the whole float simplify    strategy. 2. Fix a bug where -inf didn't simplify to inf."
collections.py;67;DELETED;David R. MacIver;david@drmaciver.com;2015-04-01 22:36:23+02:00;dfd85374bba47349c746d0a23b3390f3f04ecbf6;"Merge branch 'new_simplification_api'  Conflicts: 	docs/supported.rst"
numbers.py;215;DELETED;David R. MacIver;david@drmaciver.com;2015-04-01 22:36:23+02:00;dfd85374bba47349c746d0a23b3390f3f04ecbf6;""
test_example_quality.py;42;ADD;David R. MacIver;david@drmaciver.com;2015-04-01 22:36:23+02:00;dfd85374bba47349c746d0a23b3390f3f04ecbf6;""
strategies.py;171;ADD;David R. MacIver;david@drmaciver.com;2015-04-03 21:01:17+02:00;b1fba18e20c94e3f9c856da5687eb19db7a13df4;"example needs to support filtering explicitly"
strategies.py;670;ADD;David R. MacIver;david@drmaciver.com;2015-04-03 21:01:29+02:00;08aa3c978dd558f713364bc8c5cae41fb5a6dc2c;"Brace yourself: Monads are coming  This adds an initial sketch of making flatmap (monadic bind) work. Basically it lets you write strategies that depend on other strategies - you draw a value, then you build a strategy from the value, and you draw from that.  Simplification is not supported yet, but I know how to make it work.  This involves a lot of slightly fiddly tracking of different types of state a template can be in - it could either have come from generation, simplification, or the database, and we need to treat these all a bit differently."
strategies.py;711;ADD;David R. MacIver;david@drmaciver.com;2015-04-04 09:39:44+02:00;92d69533bb4ae744857419e0f969a8a99f6a313e;"Simplify over flatmapped strategies."
strategies.py;678;DELETED;David R. MacIver;david@drmaciver.com;2015-04-04 09:39:44+02:00;92d69533bb4ae744857419e0f969a8a99f6a313e;""
strategytests.py;196;ADD;David R. MacIver;david@drmaciver.com;2015-04-04 11:20:35+02:00;3b076b7f332d0103359b581775255a17373da073;"Test handling of bad data with more fuzzing  This adds a check to the generic strategy search suite that if we mess up the data you're expecting you still handle it sensibly.  It turns out a bunch of strategies don't, so this also fixes those instances."
strategytests.py;187;ADD;David R. MacIver;david@drmaciver.com;2015-04-04 12:16:19+02:00;a73fdf7fbee37f7b52793f3164057cdba67af8e9;"Add a test that should walk a particularly strange random route"
strategies.py;171;ADD;David R. MacIver;david@drmaciver.com;2015-04-06 08:54:34+02:00;324b7ac3b1c156623e1417322f8b954b080403bb;"Merge branch 'whatsamonad'"
strategies.py;716;ADD;David R. MacIver;david@drmaciver.com;2015-04-06 08:54:34+02:00;324b7ac3b1c156623e1417322f8b954b080403bb;""
strategytests.py;206;ADD;David R. MacIver;david@drmaciver.com;2015-04-06 08:54:34+02:00;324b7ac3b1c156623e1417322f8b954b080403bb;""
strategytests.py;228;ADD;David R. MacIver;david@drmaciver.com;2015-04-06 08:54:34+02:00;324b7ac3b1c156623e1417322f8b954b080403bb;""
basic.py;120;ADD;David R. MacIver;david@drmaciver.com;2015-04-05 13:36:30+02:00;ca5f21bfbcb936b4b28e98c2d8296cd9c0fc21ec;"Prototype of basic strategy declaration  The test for the cache is currently failing. Possibly due to my not correctly understanding how Python weak references work."
test_basic_strategy.py;58;ADD;David R. MacIver;david@drmaciver.com;2015-04-05 14:06:27+02:00;d168855cec893665d3ab82675275e69455982e83;"Assert only integers in cache. Don't use pytest raises here"
debug.py;75;ADD;David R. MacIver;david@drmaciver.com;2015-04-05 17:48:04+02:00;3af2c8fef3a8f67d688fd62b61dabaea20740fca;"Extract minimal function into debug module and use it to test datetime. Fix lack in simplification of non-zero hours"
test_basic_configuration.py;61;ADD;David R. MacIver;david@drmaciver.com;2015-04-07 10:06:36+02:00;5ac3b3c13b253082a52741babc01aaa53f359d53;"Call teardown when exception raised in reify  This was causing behaviour where a failure during test setup for one Django test was breaking all of the others because the teardown was never called."
strategytests.py;279;ADD;David R. MacIver;david@drmaciver.com;2015-04-08 18:48:17+02:00;47385f742104cb58bf6acea21085e5cffd3a4240;"Also move simplify_such_that into core"
core.py;159;ADD;David R. MacIver;david@drmaciver.com;2015-04-09 07:39:54+02:00;97ec15eb8287d1b610eeeef3d3e3a23121d9e264;"Extract more of the logic into separate functions  Nothing works, everything is in pieces on the floor. The minimal example generation works but this doesn't actually translate into @given working yet, which is the important bit."
debug.py;75;DELETED;David R. MacIver;david@drmaciver.com;2015-04-09 07:39:54+02:00;97ec15eb8287d1b610eeeef3d3e3a23121d9e264;""
test_example_quality.py;45;DELETED;David R. MacIver;david@drmaciver.com;2015-04-09 07:39:54+02:00;97ec15eb8287d1b610eeeef3d3e3a23121d9e264;""
core.py;183;ADD;David R. MacIver;david@drmaciver.com;2015-04-09 10:47:01+02:00;9fe00938b5125be80e42996454f2747821459327;"UnsatisfiedAssumption can happen there too"
strategytests.py;220;ADD;David R. MacIver;david@drmaciver.com;2015-04-09 17:10:39+02:00;f60e36e6ae2b6eac9681156f4da68a813988285a;"Make the weird paths test actually weird, also test DB"
strategytests.py;224;ADD;David R. MacIver;david@drmaciver.com;2015-04-09 17:10:39+02:00;f60e36e6ae2b6eac9681156f4da68a813988285a;""
strategytests.py;207;DELETED;David R. MacIver;david@drmaciver.com;2015-04-09 17:10:39+02:00;f60e36e6ae2b6eac9681156f4da68a813988285a;""
core.py;80;ADD;David R. MacIver;david@drmaciver.com;2015-04-10 19:20:55+02:00;e0fe59604cc8fd622016d6d276f0729e950829a4;"Handle case where non-failing example was in DB  Previously we would raise an error in the following case:    1. We were testing a space with very few examples   2. We have previously saved 1 or more examples for it in the DB   3. We assume(False) on too many of the examples that *weren't* in the DB  This is because we were failing to count examples from the DB as satisfying.  The fix is to move storage into the example search code so it's able to look for things there."
core.py;183;DELETED;David R. MacIver;david@drmaciver.com;2015-04-10 19:20:55+02:00;e0fe59604cc8fd622016d6d276f0729e950829a4;""
test_basic_strategy.py;127;ADD;David R. MacIver;david@drmaciver.com;2015-04-11 23:56:37+02:00;af0f22a2f080e0d6d0c1e90ee4172323535e8784;"Clear exc_info in GC tests because it retains references in 2.x"
executors.py;43;ADD;David R. MacIver;david@drmaciver.com;2015-04-12 07:57:05+02:00;40fec078a250c6603592d425c3b0a4a167e31f94;"This commit introduces the notion of an executor  An executor gives you control over how your code is run. This was already in use for the django integration, but this allows for more powerful control. In particular this will allow for a testmachine style "fork before running the test" and will enable support for Issue #52."
forking.py;92;ADD;David R. MacIver;david@drmaciver.com;2015-04-12 08:36:39+02:00;17ff810a91c30438e98872f63ffd7e53c41b3bd4;"Add a forking executor  This lets you run each test in a subprocess, protecting you against things like C level assertion errors, segfaults, etc."
debug.py;93;ADD;David R. MacIver;david@drmaciver.com;2015-04-21 11:40:14+02:00;7c2b30460d86e1211b7d654bfae312717e42c13d;"A bunch of more thorough testing in cover"
debug.py;116;ADD;David R. MacIver;david@drmaciver.com;2015-04-21 11:40:14+02:00;7c2b30460d86e1211b7d654bfae312717e42c13d;""
test_via_the_database.py;81;ADD;David R. MacIver;david@drmaciver.com;2015-04-21 11:40:14+02:00;7c2b30460d86e1211b7d654bfae312717e42c13d;""
test_flatmap.py;140;ADD;David R. MacIver;david@drmaciver.com;2015-04-21 14:04:20+02:00;d0a0e370cc07a22a2f262e616143dc7f1a95ee02;"Test for simplifying flatmap without reifying"
numbers.py;333;ADD;David R. MacIver;david@drmaciver.com;2015-04-28 10:45:23+02:00;18632a24d830a9a72608b71fe0e5f73eb80b9abb;"Simplify should not increase complexity.  Previously there was no shared invariant between strictly_simpler and simplify. They were treated as somewhat orthogonal. This wasn't great.  This adds a fairly weak invariant: It should not be the case that x simplifies to y and x is strictly simpler than y. This turns out not to have been satisfied for numeric types, partly because the strictly_simpler implementation for int was just plain wrong."
stateful.py;102;ADD;David R. MacIver;david@drmaciver.com;2015-04-29 21:20:38+02:00;9197820b4471a31ceaaa8ef01276add9581075b9;"Initial stateful testing implementation"
stateful.py;197;ADD;David R. MacIver;david@drmaciver.com;2015-04-29 21:20:38+02:00;9197820b4471a31ceaaa8ef01276add9581075b9;""
stateful.py;435;ADD;David R. MacIver;david@drmaciver.com;2015-04-29 23:29:03+02:00;2ef7560d3f960aee13b5d35d31083729676526c0;"Rule based definition of state machines  This is now ~ feature parity with TestMachine."
test_stateful.py;150;ADD;David R. MacIver;david@drmaciver.com;2015-04-30 11:09:06+02:00;afd7b559223428782c252d203ae6e9df1ca7393f;"Serialization of stateful tests"
test_stateful.py;164;ADD;David R. MacIver;david@drmaciver.com;2015-04-30 11:09:06+02:00;afd7b559223428782c252d203ae6e9df1ca7393f;""
stateful.py;139;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 14:04:37+02:00;63339bd98e590986272aa875466af6d9774054b0;"Merge branch 'stateful_testing'"
stateful.py;233;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 14:04:37+02:00;63339bd98e590986272aa875466af6d9774054b0;""
stateful.py;541;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 14:04:37+02:00;63339bd98e590986272aa875466af6d9774054b0;""
test_stateful.py;179;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 14:04:37+02:00;63339bd98e590986272aa875466af6d9774054b0;""
test_stateful.py;193;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 14:04:37+02:00;63339bd98e590986272aa875466af6d9774054b0;""
test_database.py;211;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 17:03:55+02:00;6afa5130379fd4f2442119538d458cff95b006d1;"Don't go over max_examples from DB"
test_strategy_state.py;106;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 18:50:51+02:00;8cb71df47ca6c24d0a552277117e7be6710c3d32;"Stateful representation of Hypothesis API. Currently demonstrating some bugs"
test_strategy_state.py;124;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 18:50:51+02:00;8cb71df47ca6c24d0a552277117e7be6710c3d32;""
test_strategy_state.py;183;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 18:50:51+02:00;8cb71df47ca6c24d0a552277117e7be6710c3d32;""
test_strategy_state.py;92;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 20:40:44+02:00;82b5058c07d0430443b3b218c57f23a924a38dd9;"Additional rules for simplifying strategies"
test_strategy_state.py;286;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 20:40:44+02:00;82b5058c07d0430443b3b218c57f23a924a38dd9;""
test_strategy_state.py;301;ADD;David R. MacIver;david@drmaciver.com;2015-05-01 20:40:44+02:00;82b5058c07d0430443b3b218c57f23a924a38dd9;""
test_strategy_state.py;286;DELETED;David R. MacIver;david@drmaciver.com;2015-05-02 14:02:44+02:00;303a2951355a849415c27e5cfe2fcbe495f49c30;"More robust strategy state machine"
test_strategy_state.py;301;DELETED;David R. MacIver;david@drmaciver.com;2015-05-02 14:02:44+02:00;303a2951355a849415c27e5cfe2fcbe495f49c30;""
stateful.py;241;ADD;David R. MacIver;david@drmaciver.com;2015-05-05 08:31:24+02:00;3af3f93509171b242ed3eaed63389d53fa7f023a;"Keep multiple serialized templates around  The idea is that when we have inconsistent strategies at an index it will *usually* be from a small set. Thus the correct thing to do is that when we encounter bad data we don't throw it away, but we save it for the next time something like this comes up.  In particular this means we don't throw away all that work we did last time in simplifying our data and allows us to achieve much better simplifications."
stateful.py;238;DELETED;David R. MacIver;david@drmaciver.com;2015-05-05 08:31:24+02:00;3af3f93509171b242ed3eaed63389d53fa7f023a;""
numbers.py;356;ADD;David R. MacIver;david@drmaciver.com;2015-05-06 20:46:09+02:00;8e517bc2edd7b0213864308c31ef35e9c856fec2;"Use full range of int simplifiers rather than full_simplify on floating. Way faster"
numbers.py;389;ADD;David R. MacIver;david@drmaciver.com;2015-05-06 20:46:09+02:00;8e517bc2edd7b0213864308c31ef35e9c856fec2;""
numbers.py;382;DELETED;David R. MacIver;david@drmaciver.com;2015-05-06 20:46:09+02:00;8e517bc2edd7b0213864308c31ef35e9c856fec2;""
test_database.py;251;ADD;David R. MacIver;david@drmaciver.com;2015-05-11 12:25:06+02:00;db1bf641b7359a258fed07ff55bd48e9ef14d36a;"Correctly handle max_iterations in fetching from DB"
compat.py;78;ADD;David R. MacIver;david@drmaciver.com;2015-05-15 16:52:47+02:00;60040c37ebded91a2a579050bdfa4dc484a52c1a;"Handle qualname on python 3.2 correctly"
reflection.py;51;ADD;David R. MacIver;david@drmaciver.com;2015-05-16 18:55:48+02:00;934412ac253614da71ea416ac286e10e393d985c;"More robust function digests"
reflection.py;55;ADD;David R. MacIver;david@drmaciver.com;2015-05-17 09:22:12+02:00;fd6c99fe1babe4fa04a42b4431f93a20b0924ebf;"Handle functions with no __name__ in digest. Ditch process tests as unneeded"
reflection.py;59;ADD;David R. MacIver;david@drmaciver.com;2015-05-17 09:22:12+02:00;fd6c99fe1babe4fa04a42b4431f93a20b0924ebf;""
strategies.py;699;DELETED;David R. MacIver;david@drmaciver.com;2015-05-19 14:37:31+01:00;92391af9522d86cec9d6caf05c96ecb9c2ef0129;"Improved flatmap implementation with no cache"
numbers.py;387;DELETED;David R. MacIver;david@drmaciver.com;2015-05-29 22:57:49+01:00;29724952ca2ec6a3ce7b2cc18014781e7d448c6b;"Treat floats as integers  This gives us faster and better simplifications and supports for small size float ranges."
numbers.py;399;ADD;David R. MacIver;david@drmaciver.com;2015-05-30 07:01:43+01:00;7362c152217fb11766ea3568dd47bf91fadcc706;"Careful tracking of size of floating point intervals"
numbers.py;366;DELETED;David R. MacIver;david@drmaciver.com;2015-06-04 15:56:11+01:00;d29cb1f0142475352fa5def3222ab133e453d4d1;"More principled simplification of floats  The idea is that we now always prefer positive floats, then floats closer to zero. By using the integer representation of the float we have a high performance and exact simplification.  The results won't necessarily be what a human would consider simplest, but they should still be good."
numbers.py;399;DELETED;David R. MacIver;david@drmaciver.com;2015-06-04 15:56:11+01:00;d29cb1f0142475352fa5def3222ab133e453d4d1;""
numbers.py;365;ADD;David R. MacIver;david@drmaciver.com;2015-06-06 14:37:40+01:00;8b5d2b5ffa4e4a815313ace39c517c17da232dec;"Revert "More principled simplification of floats"  This reverts commit 31d44da8260123ef4d10c7836d893ada5162f7c6."
numbers.py;398;ADD;David R. MacIver;david@drmaciver.com;2015-06-06 14:37:40+01:00;8b5d2b5ffa4e4a815313ace39c517c17da232dec;""
enforce_header.py;35;ADD;David R. MacIver;david@drmaciver.com;2015-06-10 10:48:56+01:00;639f1e138c29369803870ec28123259dabd9a1b8;"Add custom git merge tool"
mergedbs.py;75;ADD;David R. MacIver;david@drmaciver.com;2015-06-10 10:48:56+01:00;639f1e138c29369803870ec28123259dabd9a1b8;""
datetime.py;124;ADD;David R. MacIver;david@drmaciver.com;2015-06-28 15:13:55+01:00;4116bb7a965e4e04d961c06e67f9a915847ed653;"Handle the overflow error we get from localizing outside of the valid range of years"
mergedbs.py;103;ADD;David R. MacIver;david@drmaciver.com;2015-06-29 09:15:31+01:00;25aa41acdf2b91b62fac29cc07535226783fea0b;"Proper testing of git merge tool. Improve to handle deletions"
mergedbs.py;121;ADD;David R. MacIver;david@drmaciver.com;2015-06-29 09:15:31+01:00;25aa41acdf2b91b62fac29cc07535226783fea0b;""
mergedbs.py;79;DELETED;David R. MacIver;david@drmaciver.com;2015-06-29 09:15:31+01:00;25aa41acdf2b91b62fac29cc07535226783fea0b;""
test_git_merge.py;29;ADD;David R. MacIver;david@drmaciver.com;2015-06-29 09:15:31+01:00;25aa41acdf2b91b62fac29cc07535226783fea0b;""
morphers.py;79;ADD;David R. MacIver;david@drmaciver.com;2015-07-12 10:23:02+01:00;3147dfe9ed451aa4a111a8f0cdb917940ff9fcd5;"This introduces Morphers  A Morpher is a type that can become any type producable by a strategy. These are intended as an implementation detail for other more usable and less confusing functionality."
morphers.py;89;ADD;David R. MacIver;david@drmaciver.com;2015-07-12 10:23:02+01:00;3147dfe9ed451aa4a111a8f0cdb917940ff9fcd5;""
test_collective_minimization.py;54;ADD;David R. MacIver;david@drmaciver.com;2015-07-12 10:34:10+01:00;8a3a2c57efd852186a11859ebc1535fb7107a748;"Rebuild flatmap on top of Morpher."
fakefactory.py;73;ADD;David R. MacIver;david@drmaciver.com;2015-07-21 12:11:23-04:00;4a97b43d51028c34b5c1fcfcaf5ec03a600aa304;"Substantially faster generation for fake factory"
recursive.py;97;ADD;David R. MacIver;david@drmaciver.com;2015-07-22 16:07:04-04:00;41eaa04cb2642384b73c72fc9bbb50ff0b90d1c9;"Add fixed point combinator for strategies  The idea is to support recursive data in a way that manages depth by controlling the maximum number of "leaf" nodes. This lets us adapt to any level of branching the user wants to throw at us without having to explicitly set a branching rate.  The idea is that you specify a base state and a recursive case which can expand any strategy to produce a new one, you specify a limit, and then Hypothesis gives you something which will turn that into a strategy for a tree of strategies built off that."
recursive.py;107;ADD;David R. MacIver;david@drmaciver.com;2015-07-22 16:07:04-04:00;41eaa04cb2642384b73c72fc9bbb50ff0b90d1c9;""
conftest.py;39;DELETED;David R. MacIver;david@drmaciver.com;2015-07-23 23:45:58-04:00;bdd48baa9c72cac0c559c418a5752c75b068c9ac;"Give up on resource limiting in tests altogether"
recursive.py;97;DELETED;David R. MacIver;david@drmaciver.com;2015-07-24 17:22:36-04:00;a40a0329cc0702591d7d9cc541612219301da2c1;"Introduce idea of a bad template draw  This allows us to abort some draws in the way that we can abort reify. This allows us to handle the recursive strategies without looping inside them (we implicitly loop at the top level)."
recursive.py;107;DELETED;David R. MacIver;david@drmaciver.com;2015-07-24 17:22:36-04:00;a40a0329cc0702591d7d9cc541612219301da2c1;""
morphers.py;108;ADD;David R. MacIver;david@drmaciver.com;2015-07-25 12:49:45-04:00;2c2e8f4aa93e204cba6441fd46439bfd283ebed4;"Handle the possibility of bad templates inside flatmap"
morphers.py;64;ADD;David R. MacIver;david@drmaciver.com;2015-08-02 20:21:18+01:00;998960bfd16941fe7a1fe1587bc08c99078bb917;"Simplify morphers significantly.  There doesn't seem to be any real use case for multi strategy morphers and they add a lot of complication to the implementation."
morphers.py;74;ADD;David R. MacIver;david@drmaciver.com;2015-08-02 20:21:18+01:00;998960bfd16941fe7a1fe1587bc08c99078bb917;""
morphers.py;88;DELETED;David R. MacIver;david@drmaciver.com;2015-08-02 20:21:18+01:00;998960bfd16941fe7a1fe1587bc08c99078bb917;""
morphers.py;98;DELETED;David R. MacIver;david@drmaciver.com;2015-08-02 20:21:18+01:00;998960bfd16941fe7a1fe1587bc08c99078bb917;""
morphers.py;109;DELETED;David R. MacIver;david@drmaciver.com;2015-08-02 20:21:18+01:00;998960bfd16941fe7a1fe1587bc08c99078bb917;""
strategytests.py;340;DELETED;David R. MacIver;david@drmaciver.com;2015-08-03 10:06:39+01:00;8a160f0a948d93d85dad74bdb5d5edbc52d2f9fd;"Avoid loops in full_simplify in minimize_to_empty"
test_settings.py;49;DELETED;David R. MacIver;david@drmaciver.com;2015-10-13 10:12:32+01:00;d16698842fc405233b454cf347a7efb0be758183;"Deprecate external definition of settings.  This complicates a lot of decisions around validation and is not actually a useful feature in the presence of the new API (the previous reason for it was because settings played a significant role in the definition of new strategies, so it was important to be able to define your own)."
datetime.py;45;DELETED;David R. MacIver;david@drmaciver.com;2015-10-28 16:59:20+00:00;212aed5bc1556cfd059f72dd299aa583ff526dbf;"Defer resolution of datetimes  This lets us centralize all the places where we can get errors in datetimes (there are a lot of them) and thus ensure we handle them correctly. Previously there were bunch of places where because of our use of datetime internally they could easily slip in."
datetime.py;127;DELETED;David R. MacIver;david@drmaciver.com;2015-10-28 16:59:20+00:00;212aed5bc1556cfd059f72dd299aa583ff526dbf;""
datetime.py;230;DELETED;David R. MacIver;david@drmaciver.com;2015-10-28 16:59:20+00:00;212aed5bc1556cfd059f72dd299aa583ff526dbf;""
datetime.py;240;DELETED;David R. MacIver;david@drmaciver.com;2015-10-28 16:59:20+00:00;212aed5bc1556cfd059f72dd299aa583ff526dbf;""
test_dates.py;61;ADD;David R. MacIver;david@drmaciver.com;2015-10-28 16:59:20+00:00;212aed5bc1556cfd059f72dd299aa583ff526dbf;""
test_datetime.py;164;ADD;David R. MacIver;david@drmaciver.com;2015-10-28 16:59:20+00:00;212aed5bc1556cfd059f72dd299aa583ff526dbf;""
charstree.py;66;ADD;Alexander Shorin;kxepal@gmail.com;2015-09-30 16:24:07+03:00;156d93ea9199ccbb5d93b04e73da4aac5bed7244;"Implement characters strategy  This strategy is used to produce Unicode characters in all range till `sys.maxunicode`. Additionally, this range could be limited by exact minimal and maximal code points and by Unicode groups (white and black lists).  This implementation adds new module `charstree` which operates with underlying data structure used by OneCharacterStrategy. The choose of used data structure was stopped on tree-like dict primary indexed by Unicode categories names. Next three levels are used by intermediate values which produced by applying special mask (0xfff000, 0xffff00 and 0xfffff0 respectively) onto code point value. For instance, for character with code point 32433 (0x7eb1) the path would be:      {'Lo': {0x7000: {0x0e00: {0x00b0: (1, 1)}}}}  Such kind of structure serves two proposes: 1. Reduce cost of code point lookup for specific category 2. Reduce amount of used big numbers which helps to keep the tree more compact (~9KiB compressed).  Yes, size of the tree matters since the characters tree doesn't generates on each run: it produced once and caches in to special file within .hypothesis directory. This cache is optional (if write fails due to readonly FS - it's ok), but it reduces first call time from ~2s to ~0.001s.  `OneCharacterStrategy` behavior had changed: it doesn't excludes surrogates by default (`text()` strategy keeps following the old behaviour). It also avoid generation of random characters in order to check them after if they are good or not before yield. With generating always good characters, performance of the strategy get improved relative to amount of applied constraints: more narrow code points range - better performance."
charstree.py;66;ADD;David R. MacIver;david.maciver@gmail.com;2015-11-23 08:57:16+00:00;487b7367fc85bf676be7a92283f3d19d68f548dc;"Merge pull request #155 from kxepal/filtered-characters  Implement characters strategy"
core.py;570;ADD;David R. MacIver;david@drmaciver.com;2015-12-09 14:42:55+00:00;187b6b141aca8fe20607d556cf98a92369e7488a;"Perform a bunch of health checks on tests to try to catch common errors"
core.py;602;DELETED;David R. MacIver;david@drmaciver.com;2015-12-11 09:58:22+00:00;332ba1a54f958937d32ca5df828d9aa65f2a3290;"Health checks for detecting the cases of filtering too much and broad recursion"
compat.py;106;ADD;David R. MacIver;david@drmaciver.com;2015-12-12 11:36:03+00:00;04baa17d198a7bdcd096053babdefefcf39bafb2;"Complain at people if I have to work around their broken repr implementation"
morphers.py;40;ADD;David R. MacIver;david@drmaciver.com;2015-12-18 12:22:11+00:00;4ac882867634af3b637330b431db8e9b36f4199b;"New, much simpler, morpher type  Ironically this looks a lot like the implementation that morphers were designed to replace.  This sacrifices the ability to simultaneously simplify different types well, but gains performance, clarity, and fewer bugs. I think it's a distinctly sensible tradeoff."
morphers.py;63;DELETED;David R. MacIver;david@drmaciver.com;2015-12-18 12:22:11+00:00;4ac882867634af3b637330b431db8e9b36f4199b;""
morphers.py;73;DELETED;David R. MacIver;david@drmaciver.com;2015-12-18 12:22:11+00:00;4ac882867634af3b637330b431db8e9b36f4199b;""
test_flakiness.py;118;ADD;David R. MacIver;david@drmaciver.com;2016-01-07 09:50:23+00:00;087d85d9ad65a29dff15aefe6106aa534c08325b;"Give good Flaky errors for unreliable filtering"
test_flakiness.py;140;ADD;David R. MacIver;david@drmaciver.com;2016-01-07 09:50:23+00:00;087d85d9ad65a29dff15aefe6106aa534c08325b;""
configuration.py;32;ADD;David R. MacIver;david@drmaciver.com;2016-01-08 13:56:44+00:00;a0e663b2fc54acdef22c3bec7c41495b89733ede;"Settings -> settings  Why?  Well, mostly because @Settings looks really weird. Both in general and also because it's quite out of line with the rest of the Hypothesis API.  Unfortunately, hypothesis.settings is also a module. This causes some difficulty, which this ends up working around in various terrible ways."
settings.py;47;DELETED;David R. MacIver;david@drmaciver.com;2016-01-08 13:56:44+00:00;a0e663b2fc54acdef22c3bec7c41495b89733ede;""
basic.py;241;DELETED;David R. MacIver;david@drmaciver.com;2016-01-09 12:42:16+00:00;7712c01a771ddb5d946c0bf101018967ae7b6582;"Massive cleanup for 2.0.0  This deletes all the deprecated functionality and cleans up some additional behaviour with @given."
test_basic_strategy.py;75;DELETED;David R. MacIver;david@drmaciver.com;2016-01-09 12:42:16+00:00;7712c01a771ddb5d946c0bf101018967ae7b6582;""
test_basic_strategy.py;111;DELETED;David R. MacIver;david@drmaciver.com;2016-01-09 12:42:16+00:00;7712c01a771ddb5d946c0bf101018967ae7b6582;""
core.py;110;DELETED;David R. MacIver;david@drmaciver.com;2015-11-13 21:01:27+00:00;610e1c3b539b8b11946ef9f66b8e7c8683a2d2dd;"Initial attempts to conjecturize Hypothesis  This is half in pieces and doesn't work very well yet. Some things are working. Most aren't. It's really an initial proof of concept more than it is even heading in the direction of a finished form.  This commit squashes a whole bunch of work, much of which turned out to be a bad idea, in a desperate attempt to rebase this onto Hypothesis 2.0"
core.py;259;DELETED;David R. MacIver;david@drmaciver.com;2015-11-13 21:01:27+00:00;610e1c3b539b8b11946ef9f66b8e7c8683a2d2dd;""
engine.py;122;ADD;David R. MacIver;david@drmaciver.com;2015-11-13 21:01:27+00:00;610e1c3b539b8b11946ef9f66b8e7c8683a2d2dd;""
debug.py;117;DELETED;David R. MacIver;david@drmaciver.com;2015-11-13 21:01:27+00:00;610e1c3b539b8b11946ef9f66b8e7c8683a2d2dd;""
debug.py;148;DELETED;David R. MacIver;david@drmaciver.com;2015-11-13 21:01:27+00:00;610e1c3b539b8b11946ef9f66b8e7c8683a2d2dd;""
numbers.py;363;DELETED;David R. MacIver;david@drmaciver.com;2015-11-13 21:01:27+00:00;610e1c3b539b8b11946ef9f66b8e7c8683a2d2dd;""
numbers.py;396;DELETED;David R. MacIver;david@drmaciver.com;2015-11-13 21:01:27+00:00;610e1c3b539b8b11946ef9f66b8e7c8683a2d2dd;""
strategies.py;150;DELETED;David R. MacIver;david@drmaciver.com;2015-11-13 21:01:27+00:00;610e1c3b539b8b11946ef9f66b8e7c8683a2d2dd;""
test_flatmap.py;82;DELETED;David R. MacIver;david@drmaciver.com;2015-11-13 21:01:27+00:00;610e1c3b539b8b11946ef9f66b8e7c8683a2d2dd;""
test_via_the_database.py;102;DELETED;David R. MacIver;david@drmaciver.com;2015-11-13 21:01:27+00:00;610e1c3b539b8b11946ef9f66b8e7c8683a2d2dd;""
database.py;130;ADD;David R. MacIver;david@drmaciver.com;2016-01-17 14:31:53+00:00;bfbd36d7d26179b4e0204fdce5f9411acda00a81;"Initial attempt at getting DB working again"
database.py;143;ADD;David R. MacIver;david@drmaciver.com;2016-01-17 14:31:53+00:00;bfbd36d7d26179b4e0204fdce5f9411acda00a81;""
test_database.py;200;DELETED;David R. MacIver;david@drmaciver.com;2016-01-17 14:31:53+00:00;bfbd36d7d26179b4e0204fdce5f9411acda00a81;""
test_database.py;243;DELETED;David R. MacIver;david@drmaciver.com;2016-01-17 14:31:53+00:00;bfbd36d7d26179b4e0204fdce5f9411acda00a81;""
test_database_backend.py;59;DELETED;David R. MacIver;david@drmaciver.com;2016-01-17 14:31:53+00:00;bfbd36d7d26179b4e0204fdce5f9411acda00a81;""
morphers.py;34;DELETED;David R. MacIver;david@drmaciver.com;2016-01-19 09:38:27+00:00;e9fc0d6e9d19b32e73c9edfee9582cde1b0dcddc;"Get rid of concept of morphers"
strategytests.py;310;DELETED;David R. MacIver;david@drmaciver.com;2016-01-19 11:31:21+00:00;5f977df285f8e7d41d438954e31405f964039865;"More dead code deletion"
test_datetime.py;151;DELETED;David R. MacIver;david@drmaciver.com;2016-01-19 11:31:21+00:00;5f977df285f8e7d41d438954e31405f964039865;""
test_strategy_state.py;176;DELETED;David R. MacIver;david@drmaciver.com;2016-01-19 11:31:21+00:00;5f977df285f8e7d41d438954e31405f964039865;""
charstree.py;100;DELETED;David R. MacIver;david@drmaciver.com;2016-01-19 16:47:20+00:00;2fbcbcc558d3b9c2978141ef04a35c5d2044ed00;"Fix up text a bit to pass test_simple_strings"
stateful.py;286;DELETED;David R. MacIver;david@drmaciver.com;2016-01-19 17:20:48+00:00;6f1025758fc3ea4ae6fc361b67261f3a06fef326;"Get stateful testing mostly working again"
test_stateful.py;255;DELETED;David R. MacIver;david@drmaciver.com;2016-01-19 17:20:48+00:00;6f1025758fc3ea4ae6fc361b67261f3a06fef326;""
test_stateful.py;269;DELETED;David R. MacIver;david@drmaciver.com;2016-01-19 17:20:48+00:00;6f1025758fc3ea4ae6fc361b67261f3a06fef326;""
executors.py;70;ADD;David R. MacIver;david@drmaciver.com;2016-01-20 12:57:25+00:00;eaecae1be656b4d3a3590be75708d965094df4c4;"Refactor executors to allow for access to data object"
executors.py;70;DELETED;David R. MacIver;david@drmaciver.com;2016-01-20 14:24:08+00:00;05aaab2e756eac18c11655e56cc241d39c153ec1;"Rebuild forking executor on top of new API  Note: I am officially a terrible person."
forking.py;68;ADD;David R. MacIver;david@drmaciver.com;2016-01-20 14:24:08+00:00;05aaab2e756eac18c11655e56cc241d39c153ec1;""
forking.py;78;ADD;David R. MacIver;david@drmaciver.com;2016-01-20 14:24:08+00:00;05aaab2e756eac18c11655e56cc241d39c153ec1;""
extmethod.py;55;DELETED;David R. MacIver;david@drmaciver.com;2016-01-20 14:26:41+00:00;54e45e047322b3fcae0bbca0a4be3797df6c4ce1;"Remove last use of ExtMethod"
datetime.py;68;ADD;David R. MacIver;david@drmaciver.com;2016-02-01 16:41:21+02:00;e12d8f75f3a234beef48613a7b10b554aaeef147;"Fix datetime support"
test_dates.py;61;DELETED;David R. MacIver;david@drmaciver.com;2016-02-01 16:41:21+02:00;e12d8f75f3a234beef48613a7b10b554aaeef147;""
recursive.py;74;ADD;David R. MacIver;david@drmaciver.com;2016-02-05 16:38:47+00:00;ca0c15687d4b88b0c475dffa649f01cbc32476e2;"Fix recursive to respect leaf limit"
utils.py;96;ADD;David R. MacIver;david@drmaciver.com;2016-02-06 11:14:46+00:00;bed08aed654ff043ff6dd9d5b55a24bc6015a384;"Converage and fix up conjecture utils"
test_database_usage.py;46;ADD;David R. MacIver;david@drmaciver.com;2016-02-06 11:36:01+00:00;dd9350587460bfb2a11c24ceea9284d20db415aa;"Implement database garbage collection."
test_database_usage.py;76;ADD;David R. MacIver;david@drmaciver.com;2016-02-06 11:36:01+00:00;dd9350587460bfb2a11c24ceea9284d20db415aa;""
test_database_usage.py;102;ADD;David R. MacIver;david@drmaciver.com;2016-02-06 11:36:01+00:00;dd9350587460bfb2a11c24ceea9284d20db415aa;""
test_database_backend.py;61;ADD;David R. MacIver;david@drmaciver.com;2016-02-06 12:10:59+00:00;26b9b1427ab53412eee1535585c375bd1638a44d;"Restore tests for database backend failure handling"
test_strategy_state.py;83;DELETED;David R. MacIver;david@drmaciver.com;2016-02-09 09:49:15+00:00;9a4271446986dc8fef5a3fab94d7f8af77a0eafd;"Rip out choices and streaming"
database.py;218;ADD;David R. MacIver;david@drmaciver.com;2016-02-09 18:10:52+00:00;4bae85740b14a2e9854def61b8010ccc9df19dd8;"New directory based DB implementation"
database.py;256;ADD;David R. MacIver;david@drmaciver.com;2016-02-09 18:10:52+00:00;4bae85740b14a2e9854def61b8010ccc9df19dd8;""
database.py;299;ADD;David R. MacIver;david@drmaciver.com;2016-02-09 18:10:52+00:00;4bae85740b14a2e9854def61b8010ccc9df19dd8;""
forking.py;68;DELETED;David R. MacIver;david@drmaciver.com;2016-02-09 18:16:40+00:00;d3a41d32406649165879ff1a18b9d337ee757f87;"Woo I get to ditch the forking executor"
forking.py;78;DELETED;David R. MacIver;david@drmaciver.com;2016-02-09 18:16:40+00:00;d3a41d32406649165879ff1a18b9d337ee757f87;""
forking.py;224;DELETED;David R. MacIver;david@drmaciver.com;2016-02-09 18:16:40+00:00;d3a41d32406649165879ff1a18b9d337ee757f87;""
charmap.py;117;ADD;David R. MacIver;david@drmaciver.com;2016-02-10 18:42:18+00:00;17492c08d72bda0840411289f4dcfbd101617166;"A whole confused pile of stuff, mostly around text."
charmap.py;146;ADD;David R. MacIver;david@drmaciver.com;2016-02-10 18:42:18+00:00;17492c08d72bda0840411289f4dcfbd101617166;""
database.py;198;DELETED;David R. MacIver;david@drmaciver.com;2016-02-11 11:11:57+00:00;c895bcda0221c673bb9b0b89a0203dcd33da007b;"Clean up database usage and API"
strings.py;68;ADD;David R. MacIver;david@drmaciver.com;2016-02-11 14:17:41+00:00;44cc9a1fd4d3aa85dd79d90cc678a9eb64c4c1fa;"Get multiline string behaviour back"
strings.py;69;ADD;David R. MacIver;david@drmaciver.com;2016-02-11 18:12:27+00:00;2928837fe69612262517967e7b4fa1865a33c044;"Handle newlines correctly"
strings.py;68;DELETED;David R. MacIver;david@drmaciver.com;2016-02-11 18:12:27+00:00;2928837fe69612262517967e7b4fa1865a33c044;""
executors.py;41;DELETED;David R. MacIver;david@drmaciver.com;2016-02-15 13:47:09+00:00;1f9c77100f0c328b35a77df523eef50c16286a49;"Simplify executors logic."
executors.py;41;ADD;David R. MacIver;david@drmaciver.com;2016-02-15 14:21:51+00:00;1d13af872d0c2f0ea11525997a3d9efd82493b6e;"Revert "Simplify executors logic."  This reverts commit 8de9e8dc749d35225b5a9c330c5280df21362119."
core.py;110;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;"Merge branch 'conjecturize'  This is not a drill. Repeat: This is not a drill."
core.py;259;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
database.py;155;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
database.py;176;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
database.py;196;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
database.py;220;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
database.py;254;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
backend.py;115;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
datetime.py;68;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
charmap.py;118;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
charmap.py;147;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
charstree.py;66;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
engine.py;155;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
utils.py;113;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
debug.py;117;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
debug.py;148;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
extmethod.py;55;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
morphers.py;40;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
numbers.py;363;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
numbers.py;396;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
recursive.py;73;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
strategies.py;150;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
strings.py;69;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
stateful.py;286;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
strategytests.py;312;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
forking.py;96;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_database.py;200;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_database.py;243;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_database_usage.py;47;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_database_usage.py;76;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_database_usage.py;102;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_flatmap.py;82;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_stateful.py;255;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_stateful.py;269;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_via_the_database.py;102;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_dates.py;61;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_datetime.py;152;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_strategy_state.py;117;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_strategy_state.py;242;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 07:24:20+00:00;a22f98d452d7b1ec6bd753104de0c60edab2b52d;""
test_strategy_state.py;83;ADD;David R. MacIver;david@drmaciver.com;2016-02-16 07:58:29+00:00;2d195a0d54aceabb348d55ca611bdf92ddabd7ae;"Revert "Rip out choices and streaming"  This reverts commit 9a4271446986dc8fef5a3fab94d7f8af77a0eafd.  Conflicts: 	src/hypothesis/strategies.py 	tests/cover/test_stateful.py 	tests/nocover/test_descriptortests.py 	tests/nocover/test_strategy_state.py"
test_strategy_state.py;83;DELETED;David R. MacIver;david@drmaciver.com;2016-02-16 09:22:52+00:00;a6a5d6e17f6afc578274e40f1647ea82e653b20f;"Previous use of streaming in test_strategy_state is no longer supported"
core.py;305;ADD;David R. MacIver;david@drmaciver.com;2016-02-22 19:20:00+00:00;9da7fd3b4e33a4313a23f7678453a225324f6bf0;"Add a cache warmup step to the health check"
strategies.py;170;ADD;David R. MacIver;david@drmaciver.com;2016-03-04 11:37:31+00:00;dcde0754e277bc62c6ba0727a2d202c53e3d4916;"Support for strategies that never generate"
pretty.py;364;ADD;David R. MacIver;david@drmaciver.com;2016-03-05 10:12:38+00:00;7f4dd55ff01cbd5e9aa24a500f10dfc8eda91b0f;"Add pretty printer vendor  This is based on IPython's, lightly altered and reformatted to meet Hypothesis code standards and dependencies."
pretty.py;492;ADD;David R. MacIver;david@drmaciver.com;2016-03-05 10:12:38+00:00;7f4dd55ff01cbd5e9aa24a500f10dfc8eda91b0f;""
reflection.py;205;ADD;David R. MacIver;david@drmaciver.com;2016-09-06 12:36:14+01:00;d9f6a231a5d82fea02966660cc15493fb9d942af;"Move from terrible heuristic approach to just decompiling the lambdas"
reflection.py;267;DELETED;David R. MacIver;david@drmaciver.com;2016-09-06 12:36:14+01:00;d9f6a231a5d82fea02966660cc15493fb9d942af;""
engine.py;488;ADD;David R. MacIver;david@drmaciver.com;2016-09-06 16:48:41+01:00;7f0768ad4b66c4eede439754bd98b5ddb5f47f71;"Add event system and reporting  This lets you note 'events' for a test that will be recorded in the statistics report."
database.py;241;ADD;David R. MacIver;david@drmaciver.com;2016-10-04 16:40:56+01:00;2c4e34603e5dba783accd33706ac6892d7c9d523;"Handle disappearing files during a DB fetch()  Fixes #372"
reflection.py;267;ADD;David R. MacIver;david@drmaciver.com;2016-10-31 10:50:48+00:00;0579bc11749743e1296aabd86b296cdcb0aae47a;"Remove the dependency on uncompyle6  It turns out that uncompyle6 added a GPL dependency that I was previously unaware of because it was hidden inside of xdis, which is itself MIT licensed and didn't publish this fact.  GPL compliance is quite an onerous requirement to add for the sake of pretty printing some functions, so I'm removing it! This goes back to the old way of extracting lambda sources, which is less effective but works in most cases."
reflection.py;179;DELETED;David R. MacIver;david@drmaciver.com;2016-10-31 10:50:48+00:00;0579bc11749743e1296aabd86b296cdcb0aae47a;""
stateful.py;486;ADD;Tom Prince;tom.prince@twistedmatrix.com;2017-01-12 21:09:44-07:00;66cff67a183475d234d5cab1c8fa6b1b4cfe7ea6;"Add invariants."
stateful.py;498;ADD;David R. MacIver;david.maciver@gmail.com;2017-01-15 09:17:48+00:00;c79cb89439e9a7d92ae5d36615081752c0081040;"Merge pull request #425 from tomprince/invariants  Allow specifying invariants for `RuleBasedStateMachine` that get run after every step."
escalation.py;32;ADD;David R. MacIver;david@drmaciver.com;2017-04-13 11:47:35+01:00;37b3a20083096318ed892384556b2fb33d40cbf8;"Make mixing str with compatbytes an error"
escalation.py;32;ADD;Alex Chan;alex@alexwlchan.net;2017-04-13 13:48:48+01:00;282084529f3a513d8903b45efd37a1846bdea7ef;"Merge pull request #511 from HypothesisWorks/DRMacIver/string-purge  Prevent mixing str with compatbytes on Python 2.7"
test_duplication.py;59;ADD;David R. MacIver;david@drmaciver.com;2017-04-10 10:46:56+01:00;182cbd9251b0ee2735dad862fd6b781f2e36d691;"Track a tree of where Hypothesis has explored  This lets us do two important things:  * We can avoid testing duplicate buffers, both during generation   and shrinking. * When shrinking we can additionally avoid testing any buffers   that are a prefix of a buffer we've already tried (which will   result in an overrun).  This is partly intended as a performance improvement, partly intended as a data quality improvement. The data quality improvement is straightforward: In cases where we previously wasted our example budget on duplicates, we now don't.  The performance improvement in our own tests is mild to non-existent, but that's because the actual functions under test are quite fast. For things where that's not the case, this should be a significant improvement. I especially expect it to be useful for stateful testing.  This necessitates a number of small changes to the error logic - there are a lot of previous cases where Hypothesis would just keep going trying duplicates, but now returns early when it realises that it's done. These should not become errors."
test_duplication.py;59;ADD;David R. MacIver;david.maciver@gmail.com;2017-04-16 07:14:39-07:00;109f39a5ffd4e10ca1081a86ae1e1daa41b8ca55;"Merge pull request #498 from HypothesisWorks/DRMacIver/treescreening  Track a tree of where Hypothesis has explored"
benchmarks.py;130;ADD;David R. MacIver;david@drmaciver.com;2017-04-19 14:17:19+01:00;a3d1f751dcd930fca5a0aa12d19ca18d9f78711b;"Initial benchmarking script"
benchmarks.py;160;ADD;David R. MacIver;david@drmaciver.com;2017-04-19 14:17:19+01:00;a3d1f751dcd930fca5a0aa12d19ca18d9f78711b;""
benchmarks.py;235;ADD;David R. MacIver;david@drmaciver.com;2017-04-19 14:17:19+01:00;a3d1f751dcd930fca5a0aa12d19ca18d9f78711b;""
hypothesistooling.py;39;ADD;David R. MacIver;david@drmaciver.com;2017-04-20 12:25:40+01:00;a2e16baf1d2c5c00acf4b57ebefcacf78dc1ec3e;"Check the changelog and tags as build jobs"
hypothesistooling.py;49;DELETED;David R. MacIver;david@drmaciver.com;2017-04-20 14:12:56+01:00;7cf6d31d0e1dcfe12f63bdd415f869570c9cb5bc;"Clarify tag version parsing"
deploy.py;53;ADD;David R. MacIver;david@drmaciver.com;2017-04-20 19:31:07+01:00;3ec01f88d21454a49d791bf7586ae4a25e236927;"Correctly handle more statuses"
deploy.py;57;ADD;David R. MacIver;david.maciver@gmail.com;2017-04-20 13:14:39-07:00;5a2e17d08379df7b4d58d333f41cb6bfab3c164f;"Merge pull request #540 from HypothesisWorks/DRMacIver/deploy-task  Write our own deploy orchestration code"
benchmarks.py;133;ADD;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-04-21 08:49:47+10:00;c3fa6cd08395bdbe19f6546ae15c18d97688ee0e;"Merge pull request #528 from HypothesisWorks/DRMacIver/benchmarking  Add benchmarking build step"
benchmarks.py;172;ADD;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-04-21 08:49:47+10:00;c3fa6cd08395bdbe19f6546ae15c18d97688ee0e;""
benchmarks.py;260;ADD;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-04-21 08:49:47+10:00;c3fa6cd08395bdbe19f6546ae15c18d97688ee0e;""
enforce_header.py;18;DELETED;David R. MacIver;david@drmaciver.com;2017-04-21 08:00:59+01:00;e0efb9f1c4ffd0ca899ca7ce78fc2a7f111d76ee;"Also run enforce_header.py on itself"
enforce_header.py;18;DELETED;David R. MacIver;david.maciver@gmail.com;2017-04-21 04:12:26-07:00;adad98d61fa9dabd8e5610093b6ec1a07fbc6090;"Merge pull request #541 from HypothesisWorks/DRMacIver/format-scripts  Autoformat scripts too"
core.py;343;DELETED;David R. MacIver;david@drmaciver.com;2017-04-11 11:22:14+01:00;a5c12004f46a5dca83f955e17debd7495da27b3f;"Break up given into smaller chunks  This is a pure refactoring change that tears given apart and breaks it up into smaller functions.  The result isn't *much* easier to work with, but is at least better demarcated into distinct sections. More improvement could be used here, but this is a decent starting point."
core.py;282;ADD;David R. MacIver;david@drmaciver.com;2017-04-21 17:07:31+01:00;a8c599dd193d774564997cef933318a197b1026f;"Only escaltae assertions there"
core.py;280;ADD;David R. MacIver;david.maciver@gmail.com;2017-04-21 10:21:38-07:00;5cb7f694104dfb2ca3075812ad5f1ce3fe75106f;"Merge pull request #502 from HypothesisWorks/DRMacIver/given-less  Break up given into smaller chunks"
core.py;343;DELETED;David R. MacIver;david.maciver@gmail.com;2017-04-21 10:21:38-07:00;5cb7f694104dfb2ca3075812ad5f1ce3fe75106f;""
benchmarks.py;139;DELETED;David R. MacIver;david@drmaciver.com;2017-04-25 14:43:09+01:00;df2b175a100d8f116ee7e4ed52a5a86ecf813947;"Don't catch stop test"
benchmarks.py;145;DELETED;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-04-26 17:52:53+10:00;46a5d9493c53ac2db172f0ef3ddc9adc6d1e7041;"Merge pull request #588 from HypothesisWorks/DRMacIver/benchmarking-fixes  Some small benchmarking fixes"
datetime.py;69;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2017-04-29 00:09:34+10:00;34cbb3c8d9a9e70cc2c8f7170acf327f57ff4fd9;"Core strategies for datetime types  And wow, is it nice not to have compatibility constraints."
datetime.py;69;DELETED;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-05-24 09:43:01+10:00;67d69224370f69ded6277ec1dcdc8e997f8e118f;"Merge pull request #621 from Zac-HD/core-time-strats  New core strategies: datetimes, dates, times, timedeltas"
utils.py;139;DELETED;David R. MacIver;david@drmaciver.com;2017-07-01 11:33:20+01:00;5df039ff9879b4baa9696e6dd37e97c9370f5088;"Remove the distribution parameter from draw_bytes"
strings.py;70;DELETED;David R. MacIver;david@drmaciver.com;2017-07-01 11:33:20+01:00;5df039ff9879b4baa9696e6dd37e97c9370f5088;""
utils.py;139;DELETED;David R. MacIver;david.maciver@gmail.com;2017-07-07 07:59:48+01:00;e72332928cd605ecec9d4b8ba1d19b7f456b2014;"Merge pull request #710 from HypothesisWorks/DRMacIver/distributionless  Remove the distribution parameter from draw_bytes"
strings.py;70;DELETED;David R. MacIver;david.maciver@gmail.com;2017-07-07 07:59:48+01:00;e72332928cd605ecec9d4b8ba1d19b7f456b2014;""
lazy.py;45;ADD;David R. MacIver;david@drmaciver.com;2017-07-15 18:06:05+01:00;b1dd9b68fff37f7b233bb2fdb7a79a384fdcb881;"Avoid cycles when unwrapping"
test_deferred_strategies.py;185;ADD;David R. MacIver;david@drmaciver.com;2017-07-15 18:06:05+01:00;b1dd9b68fff37f7b233bb2fdb7a79a384fdcb881;""
test_deferred_strategies.py;185;DELETED;David R. MacIver;david@drmaciver.com;2017-07-15 18:22:14+01:00;7712bf90e5d7e27bca09aa0d811c4654f0139ac6;"Clean up tests to move expensive test into nocover"
test_deferred_strategies.py;69;ADD;David R. MacIver;david@drmaciver.com;2017-07-15 18:22:14+01:00;7712bf90e5d7e27bca09aa0d811c4654f0139ac6;""
lazy.py;45;ADD;David R. MacIver;david.maciver@gmail.com;2017-07-16 11:43:05+01:00;becd739f3d728a602391a4460d1d130b7b68dadd;"Merge pull request #727 from HypothesisWorks/DRMacIver/arbitrary-recursion  Support arbitrary recursive strategies"
test_deferred_strategies.py;69;ADD;David R. MacIver;david.maciver@gmail.com;2017-07-16 11:43:05+01:00;becd739f3d728a602391a4460d1d130b7b68dadd;""
core.py;455;ADD;Alex Chan;alex@alexwlchan.net;2017-04-23 13:20:33+01:00;4a84016babf5e6fbf16b53be9a606041d0e30042;"Don't carry on running if we spot a skip-test exception"
core.py;461;ADD;Alex Chan;alex@alexwlchan.net;2017-04-23 13:20:33+01:00;4a84016babf5e6fbf16b53be9a606041d0e30042;""
core.py;467;ADD;Alex Chan;alex@alexwlchan.net;2017-04-23 13:20:33+01:00;4a84016babf5e6fbf16b53be9a606041d0e30042;""
core.py;455;ADD;Alex Chan;alex@alexwlchan.net;2017-07-20 15:50:32+01:00;def8e0b87d502e856c5957485599db3eb8567b38;"Merge pull request #731 from Zac-HD/skip-exceptions  Honour 'skip test' exceptions"
core.py;461;ADD;Alex Chan;alex@alexwlchan.net;2017-07-20 15:50:32+01:00;def8e0b87d502e856c5957485599db3eb8567b38;""
core.py;467;ADD;Alex Chan;alex@alexwlchan.net;2017-07-20 15:50:32+01:00;def8e0b87d502e856c5957485599db3eb8567b38;""
types.py;77;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2017-07-23 17:20:22+10:00;ff775c11655d77eeb3dfda3791a1caee5c5a7ecf;"from_type: look up or construct a matching strategy"
types.py;87;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2017-07-23 17:20:22+10:00;ff775c11655d77eeb3dfda3791a1caee5c5a7ecf;""
types.py;135;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2017-07-23 21:05:10+10:00;99f9be1459d67e890648c30bd8a893fb91b9331c;"Use single global mapping, literate comments  This represents a slightly different approach, using a global mutable backup - so types registered by Hypothesis are treated just like types registered by the user.  I've kept it as a separate commit to ease any future investigations :)"
types.py;145;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2017-07-23 21:05:10+10:00;99f9be1459d67e890648c30bd8a893fb91b9331c;""
types.py;150;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2017-07-23 21:05:10+10:00;99f9be1459d67e890648c30bd8a893fb91b9331c;""
types.py;77;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2017-07-23 21:05:10+10:00;99f9be1459d67e890648c30bd8a893fb91b9331c;""
types.py;87;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2017-07-23 21:05:10+10:00;99f9be1459d67e890648c30bd8a893fb91b9331c;""
strategies.py;843;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2017-07-23 21:05:10+10:00;99f9be1459d67e890648c30bd8a893fb91b9331c;""
strategies.py;868;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2017-07-23 21:05:10+10:00;99f9be1459d67e890648c30bd8a893fb91b9331c;""
types.py;135;ADD;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-07-23 22:39:29+10:00;834f020dd38387af7f62a9174cd2ddd39c361737;"Merge pull request #643 from Zac-HD/from_type  Strategies from type hints, and inference of missing arguments to builds() and @given()"
types.py;145;ADD;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-07-23 22:39:29+10:00;834f020dd38387af7f62a9174cd2ddd39c361737;""
types.py;150;ADD;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-07-23 22:39:29+10:00;834f020dd38387af7f62a9174cd2ddd39c361737;""
strategies.py;866;ADD;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-07-23 22:39:29+10:00;834f020dd38387af7f62a9174cd2ddd39c361737;""
strategies.py;891;ADD;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-07-23 22:39:29+10:00;834f020dd38387af7f62a9174cd2ddd39c361737;""
types.py;168;ADD;David R. MacIver;david@drmaciver.com;2017-08-02 17:35:54+01:00;9bdd648e79588e13b9d536857bbd5d61f5c79d2e;"Apparently get_type_hints just doesn't work in the typing module backport"
types.py;168;ADD;David R. MacIver;david.maciver@gmail.com;2017-08-03 13:27:14+01:00;cbb4bb2e19cebecb3736c95da3d92f6b586ba37f;"Merge pull request #760 from HypothesisWorks/DRMacIver/27typing  Fix behaviour on Python 2.7 with typing installed"
engine.py;209;ADD;David R. MacIver;david@drmaciver.com;2017-08-03 10:13:48+01:00;6e698ad82bd34c7e6e0a32babad5653717559319;"write() modifies the output rather than reading from existing"
engine.py;209;ADD;David R. MacIver;david.maciver@gmail.com;2017-08-07 10:30:02+01:00;cc77a7bb81a7be48d9e8e7daf93b3ba2d582c1f1;"Merge pull request #762 from HypothesisWorks/DRMacIver/write-data  Change data.write() to modify the data stream"
engine.py;130;ADD;David R. MacIver;david@drmaciver.com;2017-08-06 12:16:33+01:00;d51d91d253592e6986a1d690a33a62de12bff277;"Add support for capping a byte.  The motivation here is that we currently have a situation where we can get "false uniqueness" where two different values drawn are actually the same, but because of ignored high bits they end up looking different. The matrix example in test_composite is an example where this can cause a problem.  By masking off those high bits in the data stream we fix this problem by being explicti about what we're ignoring.  We use a cap rather than a mask in the implementation because this makes it easier to count tree nodes and tell when they are dead.  The addition of draw_bits also allows us to prune the size of the search space in biased_coin by reducing the number of bits needed when the weight is i / 2^n for small n."
engine.py;226;ADD;David R. MacIver;david@drmaciver.com;2017-08-06 12:16:33+01:00;d51d91d253592e6986a1d690a33a62de12bff277;""
engine.py;270;ADD;David R. MacIver;david@drmaciver.com;2017-08-13 09:10:49+01:00;abb30b3e77b158143719c9ed50eefda5f5ae5bcc;"Use block sizes to prescreen"
engine.py;151;ADD;David R. MacIver;david.maciver@gmail.com;2017-08-22 08:12:37+01:00;27fa67d8cc121a01dba2cce0acfe8db50d058425;"Merge pull request #778 from HypothesisWorks/DRMacIver/new-shrinker  Major overhaul of the shrinker to remove bind points"
engine.py;280;ADD;David R. MacIver;david.maciver@gmail.com;2017-08-22 08:12:37+01:00;27fa67d8cc121a01dba2cce0acfe8db50d058425;""
engine.py;284;ADD;David R. MacIver;david.maciver@gmail.com;2017-08-22 08:12:37+01:00;27fa67d8cc121a01dba2cce0acfe8db50d058425;""
branchcheck.py;32;ADD;David R. MacIver;david@drmaciver.com;2017-08-21 15:11:19+01:00;3f487c8426b13cd4d478028cf64b03dff515e32a;"Add notion of branch checking"
strategies.py;1660;ADD;David R. MacIver;david@drmaciver.com;2017-08-22 10:55:36+01:00;2a2998f3d66d479700095aef1008128d57b45e3c;"Handle nan bounds in fractions better, and fix error message"
strategies.py;1654;DELETED;David R. MacIver;david@drmaciver.com;2017-08-23 09:26:05+01:00;6f27150ead56717b889b1a501d5ed6e037bda9d5;"Go back to old is_valid_bound implementation"
branchcheck.py;45;ADD;David R. MacIver;david.maciver@gmail.com;2017-08-25 12:43:25+01:00;773a5e2eddf033b3d9af47f2963f1399c386b7b7;"Merge pull request #811 from HypothesisWorks/DRMacIver/both-ways  Add custom coverage checks for argument validation functions"
floats.py;238;ADD;David R. MacIver;david@drmaciver.com;2017-08-26 10:24:08+01:00;84c15c514896535a3be72d80911ed3067bfd021b;"Use an extra bit to encode rounding behaviour"
floats.py;221;ADD;David R. MacIver;david@drmaciver.com;2017-09-02 11:42:27+01:00;db1b11e782bb6cba01b10aad4d19da3872779694;"New encoding that handles integers differently"
floats.py;238;DELETED;David R. MacIver;david@drmaciver.com;2017-09-02 11:42:27+01:00;db1b11e782bb6cba01b10aad4d19da3872779694;""
floats.py;221;DELETED;David R. MacIver;david@drmaciver.com;2017-09-02 17:57:26+01:00;a42836ddfd910653c2c237b6b1f0fa14489645a8;"improve coverage"
strategytests.py;120;DELETED;David R. MacIver;david@drmaciver.com;2017-09-10 11:02:46+01:00;55a2712a1a4b990bfdb39df907263c6bb4d3bbb8;"Remove strategy_test_suite"
strategytests.py;124;DELETED;David R. MacIver;david@drmaciver.com;2017-09-10 11:02:46+01:00;55a2712a1a4b990bfdb39df907263c6bb4d3bbb8;""
strategytests.py;120;DELETED;David R. MacIver;david.maciver@gmail.com;2017-09-11 08:55:39+01:00;5519dfb354b6ca7eec989ee928f4cec4cc574ce8;"Merge pull request #844 from HypothesisWorks/DRMacIver/remove-vestigial-test-suites  Remove strategy_test_suite"
strategytests.py;124;DELETED;David R. MacIver;david.maciver@gmail.com;2017-09-11 08:55:39+01:00;5519dfb354b6ca7eec989ee928f4cec4cc574ce8;""
debug.py;103;ADD;David R. MacIver;david@drmaciver.com;2017-09-12 16:45:08+01:00;726182fbaeebf6865c3e9cb4aa1422e3f72b897b;"Remove pytest dependency for that file"
debug.py;105;ADD;David R. MacIver;david.maciver@gmail.com;2017-09-13 08:50:29+01:00;162bfb6ae20330f3c723433a7051982a6046ae6e;"Merge pull request #853 from HypothesisWorks/DRMacIver/faster-emptiness-tests  Provide a unified helper for asserting unsatisfiability"
impl.py;57;ADD;David R. MacIver;david@drmaciver.com;2017-08-25 12:01:46+01:00;74f2845ab3f9851e6f0b2713ce5cadd055f86526;"Add support for generating indexes"
impl.py;143;ADD;David R. MacIver;david@drmaciver.com;2017-08-25 12:01:46+01:00;74f2845ab3f9851e6f0b2713ce5cadd055f86526;""
test_indexes.py;86;ADD;David R. MacIver;david@drmaciver.com;2017-08-25 12:01:46+01:00;74f2845ab3f9851e6f0b2713ce5cadd055f86526;""
impl.py;57;DELETED;David R. MacIver;david@drmaciver.com;2017-08-28 09:03:26+01:00;557344d05ebf09f8f41e2904c059b1efff040f92;"Remove ordering from the API"
impl.py;142;DELETED;David R. MacIver;david@drmaciver.com;2017-08-28 09:03:26+01:00;557344d05ebf09f8f41e2904c059b1efff040f92;""
test_indexes.py;83;DELETED;David R. MacIver;david@drmaciver.com;2017-08-28 09:03:26+01:00;557344d05ebf09f8f41e2904c059b1efff040f92;""
lazy.py;57;ADD;David R. MacIver;david@drmaciver.com;2017-09-16 13:04:55+01:00;aad1f1c1afb6790c4b18b0983e03cc43507d19d1;"Handle recursive properties as a fixed point calculation with proper value propagation"
lazy.py;62;ADD;David R. MacIver;david@drmaciver.com;2017-09-16 13:04:55+01:00;aad1f1c1afb6790c4b18b0983e03cc43507d19d1;""
strategies.py;72;ADD;David R. MacIver;david@drmaciver.com;2017-09-16 13:04:55+01:00;aad1f1c1afb6790c4b18b0983e03cc43507d19d1;""
strategies.py;90;ADD;David R. MacIver;david@drmaciver.com;2017-09-16 13:04:55+01:00;aad1f1c1afb6790c4b18b0983e03cc43507d19d1;""
strategies.py;88;ADD;David R. MacIver;david@drmaciver.com;2017-09-16 14:21:57+01:00;5663eae652f51639c7dd9476c926f5b48dd3b44e;"Have a fast path for just doing a direct recursive calculation"
strategies.py;111;ADD;David R. MacIver;david@drmaciver.com;2017-09-16 22:30:07+01:00;fcbd86b0abd5ab7d8beb188a5faefd5fb54c0d05;"Remove debugging assertion"
strategies.py;150;ADD;David R. MacIver;david@drmaciver.com;2017-09-16 22:30:07+01:00;fcbd86b0abd5ab7d8beb188a5faefd5fb54c0d05;""
strategies.py;118;DELETED;David R. MacIver;david@drmaciver.com;2017-09-16 22:30:07+01:00;fcbd86b0abd5ab7d8beb188a5faefd5fb54c0d05;""
strategies.py;157;DELETED;David R. MacIver;david@drmaciver.com;2017-09-16 22:30:07+01:00;fcbd86b0abd5ab7d8beb188a5faefd5fb54c0d05;""
lazy.py;57;ADD;David R. MacIver;david.maciver@gmail.com;2017-09-18 11:45:10+01:00;1922af9d02547c9910122d09159c38aa9ab8854c;"Merge pull request #864 from HypothesisWorks/DRMacIver/fixed-point-properties  Switch to a more sophisticated calculation for strategy properties"
lazy.py;62;ADD;David R. MacIver;david.maciver@gmail.com;2017-09-18 11:45:10+01:00;1922af9d02547c9910122d09159c38aa9ab8854c;""
strategies.py;98;ADD;David R. MacIver;david.maciver@gmail.com;2017-09-18 11:45:10+01:00;1922af9d02547c9910122d09159c38aa9ab8854c;""
strategies.py;170;ADD;David R. MacIver;david.maciver@gmail.com;2017-09-18 11:45:10+01:00;1922af9d02547c9910122d09159c38aa9ab8854c;""
escalation.py;35;ADD;David R. MacIver;david@drmaciver.com;2017-09-14 22:25:36+01:00;6e7a478f4068ec6d49935b7e94673c24fa6e5ab0;"This is scarily close to working"
escalation.py;34;DELETED;David R. MacIver;david@drmaciver.com;2017-09-14 22:25:36+01:00;6e7a478f4068ec6d49935b7e94673c24fa6e5ab0;""
escalation.py;38;ADD;David R. MacIver;david.maciver@gmail.com;2017-09-19 14:17:49+01:00;1940a4a3c66bd853f5019e6868b7b7ede119f29a;"Merge pull request #861 from HypothesisWorks/DRMacIver/coverage  Coverage guided testing"
escalation.py;34;DELETED;David R. MacIver;david.maciver@gmail.com;2017-09-19 14:17:49+01:00;1940a4a3c66bd853f5019e6868b7b7ede119f29a;""
pytestplugin.py;78;ADD;David R. MacIver;david@drmaciver.com;2017-09-14 11:10:40+01:00;72bdc7497a393863ba95bfa232dff7f55bb51950;"Add pytest flag to set seed"
pytestplugin.py;78;ADD;David R. MacIver;david.maciver@gmail.com;2017-09-20 00:01:26+01:00;37278cbaad78b80abcf84d2c19d0a77b72a98a8f;"Merge pull request #860 from HypothesisWorks/DRMacIver/print-seed  Print seed on test failure to aid reproduction"
engine.py;1152;ADD;David R. MacIver;david@drmaciver.com;2017-09-19 15:25:33+01:00;60c18348484bb3191af79d244dd2bc9a615022ee;"More principled implementation for selecting tags"
test_cache_implementation.py;70;ADD;David R. MacIver;david@drmaciver.com;2017-09-18 14:31:33+01:00;3d7ee8fbde0ac11dfb98d30a745db7838025c278;"New caching implementation"
test_cache_implementation.py;79;ADD;David R. MacIver;david@drmaciver.com;2017-09-18 14:31:33+01:00;3d7ee8fbde0ac11dfb98d30a745db7838025c278;""
test_cache_implementation.py;96;ADD;David R. MacIver;david.maciver@gmail.com;2017-09-24 08:30:11+01:00;61e7b9fc107d5e67e1c30b25e33ac3505903329a;"Merge pull request #874 from HypothesisWorks/DRMacIver/better-caching  Add a sensible eviction policy for Hypothesis's strategy caching"
test_cache_implementation.py;105;ADD;David R. MacIver;david.maciver@gmail.com;2017-09-24 08:30:11+01:00;61e7b9fc107d5e67e1c30b25e33ac3505903329a;""
engine.py;1264;ADD;David R. MacIver;david.maciver@gmail.com;2017-09-27 09:52:32+01:00;9120b33cf4ba36fd32a7b184057c28958b1e974f;"Merge pull request #880 from HypothesisWorks/DRMacIver/coverage-direction  Smart example selection based on coverage"
mergedbs.py;108;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2017-10-15 20:09:11+11:00;99c8d4d5e8857c06011c46e736954dec38c81493;"Remove broken mergedb tool"
mergedbs.py;126;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2017-10-15 20:09:11+11:00;99c8d4d5e8857c06011c46e736954dec38c81493;""
test_git_merge.py;51;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2017-10-15 20:09:11+11:00;99c8d4d5e8857c06011c46e736954dec38c81493;""
mergedbs.py;108;DELETED;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-10-16 00:29:55+11:00;31eab48f7248a156c44e1c5fd5aa993c1dee7595;"Merge pull request #943 from Zac-HD/remove-merge-db  Remove broken mergedb tool"
mergedbs.py;126;DELETED;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-10-16 00:29:55+11:00;31eab48f7248a156c44e1c5fd5aa993c1dee7595;""
test_git_merge.py;51;DELETED;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-10-16 00:29:55+11:00;31eab48f7248a156c44e1c5fd5aa993c1dee7595;""
classmap.py;30;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2017-10-17 18:07:18+11:00;69a1bb70c8a48735d139e46e8270e638574ed61e;"ClassMap appears to be unused"
classmap.py;30;DELETED;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-11-07 00:34:08+11:00;f0099954644f143a47d9348ad3c85e789ec75581;"Merge pull request #959 from Zac-HD/misc  Various bits of cleanup"
test_statistical_events.py;115;ADD;David R. MacIver;david@drmaciver.com;2017-11-17 08:35:48+00:00;d5875696e707b0552404735d2732595304824373;"Update tests to take into account "slower" code  A weird consequence of the way we do time is that measuring time more often makes it go more slowly! Because we now measure time before and after every top level draw, this causes a lot of tests to appear to be very slow. This updates those tests to suppress deadlines and health checks.  Note that this is not a real performance regression and is purely an eccentricity of our test suite."
test_statistical_events.py;115;ADD;David R. MacIver;david.maciver@gmail.com;2017-11-18 09:37:35+00:00;73b031e7e5165a6238851a8b2cb1af35af10146a;"Merge pull request #973 from HypothesisWorks/DRMacIver/integrate-healthchecks  Integrate health checks into normal test execution"
utils.py;89;ADD;Charlie Tanksley;charlie.tanksley@gmail.com;2017-10-30 10:44:19-04:00;17120e899c98396fbf1ed7d1ad7cbfcc345392c9;"adds 1-d numpy ndarray to the sampleable types  As per an IRC conversation, we ought to be able to `sample_from` one-dimensional ndarrays."
test_statistical_events.py;115;DELETED;David R. MacIver;david@drmaciver.com;2017-11-20 14:37:14+00:00;93b3372da2b7634e0c8505b214b0bf41b1dd9987;"Test and finish off showing the percentage of time spent in drawing"
test_statistical_events.py;115;DELETED;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2017-11-22 20:09:30+11:00;4daf82c268667b793f9bc06d9bee82b57d2fca33;"Merge pull request #978 from HypothesisWorks/DRMacIver/draw-time-for-statistics  Include fraction of time spent in drawing data in statistics"
reflection.py;310;ADD;David R. MacIver;david@drmaciver.com;2017-11-22 10:10:45+00:00;626b8f62c551ee907f6f87236f597696bc63a0d8;"Improve testing and make sure this actually works"
reflection.py;316;ADD;Alex Chan;alex@alexwlchan.net;2017-11-23 19:09:35+00:00;77b8a41dd61d3c7c57acae16a52e647953131575;"Merge pull request #982 from HypothesisWorks/DRMacIver/lambda-reprs  Special case decorators when extracting lambdas"
test_sampled_from.py;36;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2017-12-06 00:48:59+11:00;92cc3242d4eb6f7faafc13b496236acdd3dccc27;"More generic tests for ndarray sampling"
utils.py;89;ADD;David R. MacIver;david.maciver@gmail.com;2017-12-06 10:36:36+00:00;ba011eb28b98064593a1a0ca4409ae68bf787980;"Merge pull request #957 from charlietanksley/allows-sampling-from-numpy-ndarray  adds numpy ndarray to the list of sampleable types"
test_sampled_from.py;36;ADD;David R. MacIver;david.maciver@gmail.com;2017-12-06 10:36:36+00:00;ba011eb28b98064593a1a0ca4409ae68bf787980;""
test_reproduce_failure.py;46;ADD;David R. MacIver;david@drmaciver.com;2017-12-15 15:26:25+00:00;16262b6f53bfeb2c3f6c5bf33b05d5adb94f6986;"Include version in reproduce_failure"
test_reproduce_failure.py;46;ADD;David R. MacIver;david.maciver@gmail.com;2017-12-17 19:14:45+00:00;307692ad129bc9864556e9c3f68f86ee99c967c1;"Merge pull request #1003 from HypothesisWorks/DRMacIver/reproduce-failure  Add a decorator for reproducing failures with Hypothesis's internal format"
benchmarks.py;264;DELETED;David R. MacIver;david@drmaciver.com;2017-12-20 09:47:52+00:00;3e4f6cf0559c7eb02789e6861a89d612748a6bda;"Remove benchmarks"
benchmarks.py;457;DELETED;David R. MacIver;david@drmaciver.com;2017-12-20 09:47:52+00:00;3e4f6cf0559c7eb02789e6861a89d612748a6bda;""
benchmarks.py;264;DELETED;Alex Chan;alex@alexwlchan.net;2017-12-20 11:25:20+00:00;52af5a4de595a5105ec3921ddb69e2d1bbe1b32b;"Merge pull request #1043 from HypothesisWorks/DRMacIver/remove-benchmarks  Remove benchmarks"
benchmarks.py;457;DELETED;Alex Chan;alex@alexwlchan.net;2017-12-20 11:25:20+00:00;52af5a4de595a5105ec3921ddb69e2d1bbe1b32b;""
engine.py;910;ADD;David R. MacIver;david@drmaciver.com;2017-12-13 08:49:56+00:00;b07fe3b2386bf49b073905e9afab9d6ce26fe67d;"Extract shrinking logic into a standalone object"
engine.py;914;ADD;David R. MacIver;david@drmaciver.com;2017-12-13 08:49:56+00:00;b07fe3b2386bf49b073905e9afab9d6ce26fe67d;""
engine.py;918;ADD;David R. MacIver;david@drmaciver.com;2017-12-13 08:49:56+00:00;b07fe3b2386bf49b073905e9afab9d6ce26fe67d;""
engine.py;434;DELETED;David R. MacIver;david@drmaciver.com;2017-12-13 08:49:56+00:00;b07fe3b2386bf49b073905e9afab9d6ce26fe67d;""
engine.py;438;DELETED;David R. MacIver;david@drmaciver.com;2017-12-13 08:49:56+00:00;b07fe3b2386bf49b073905e9afab9d6ce26fe67d;""
engine.py;442;DELETED;David R. MacIver;david@drmaciver.com;2017-12-13 08:49:56+00:00;b07fe3b2386bf49b073905e9afab9d6ce26fe67d;""
engine.py;889;ADD;David R. MacIver;david.maciver@gmail.com;2017-12-20 14:03:13+00:00;366a71e77587c457f5f53b031f47dfb3d7b386aa;"Merge pull request #1023 from HypothesisWorks/DRMacIver/extract-shrinker  Remove use of runner.last_data and factor out Shrinker state"
engine.py;893;ADD;David R. MacIver;david.maciver@gmail.com;2017-12-20 14:03:13+00:00;366a71e77587c457f5f53b031f47dfb3d7b386aa;""
engine.py;897;ADD;David R. MacIver;david.maciver@gmail.com;2017-12-20 14:03:13+00:00;366a71e77587c457f5f53b031f47dfb3d7b386aa;""
engine.py;932;ADD;David R. MacIver;david.maciver@gmail.com;2017-12-20 14:03:13+00:00;366a71e77587c457f5f53b031f47dfb3d7b386aa;""
engine.py;434;DELETED;David R. MacIver;david.maciver@gmail.com;2017-12-20 14:03:13+00:00;366a71e77587c457f5f53b031f47dfb3d7b386aa;""
engine.py;438;DELETED;David R. MacIver;david.maciver@gmail.com;2017-12-20 14:03:13+00:00;366a71e77587c457f5f53b031f47dfb3d7b386aa;""
engine.py;442;DELETED;David R. MacIver;david.maciver@gmail.com;2017-12-20 14:03:13+00:00;366a71e77587c457f5f53b031f47dfb3d7b386aa;""
engine.py;1157;DELETED;David R. MacIver;david.maciver@gmail.com;2017-12-20 14:03:13+00:00;366a71e77587c457f5f53b031f47dfb3d7b386aa;""
engine.py;284;ADD;David R. MacIver;david@drmaciver.com;2018-01-01 11:11:41+00:00;7b61a4cb8d24396998fab4bddef90780c3c4ff53;"Switch to generating a prefix that guarantees novelty"
engine.py;285;ADD;David R. MacIver;david.maciver@gmail.com;2018-01-06 17:43:05+00:00;5b40005485c22b8edce0d3aa78e1a1fa648a7d75;"Merge pull request #1052 from HypothesisWorks/DRMacIver/novel-prefix  Generate prefixes that guarantee novelty rather than trying to rewrite on the fly"
test_conjecture_utils.py;45;ADD;David R. MacIver;david@drmaciver.com;2018-01-06 22:04:39+00:00;31cfcfe0a1facbc26954d53737020285036c63c5;"Get the order of operations right (and add a test that we have)"
test_conjecture_utils.py;45;ADD;David R. MacIver;david.maciver@gmail.com;2018-01-07 10:35:41+00:00;8c085f724663b588e0ae53594a38f6853c1a6de9;"Merge pull request #1049 from HypothesisWorks/DRMacIver/alias-sampling  Switch back to a vose alias method sampler"
test_integers.py;42;ADD;David R. MacIver;david@drmaciver.com;2017-12-27 12:12:13+00:00;9c65f32ecfd797cc2320e95923f425c5988df3ec;"Test for integers always shrinking to the right size"
test_integers.py;42;ADD;David R. MacIver;david.maciver@gmail.com;2018-01-08 08:36:18+00:00;c0836202a105d49c147fdb661e7ead479d7ef92d;"Merge pull request #1048 from HypothesisWorks/DRMacIver/small-ints  Make default integer size smaller"
strategies.py;1036;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2018-01-13 00:30:02+11:00;75f8d66e02be417c0a1387eac25d0491475bcfe0;"Handle recursion, forward references in from_type"
strategies.py;1043;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2018-01-13 00:30:02+11:00;75f8d66e02be417c0a1387eac25d0491475bcfe0;""
strategies.py;1036;ADD;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2018-01-13 21:30:12+11:00;90c7a3e9c0d51984fbd14c76ebc272c3fa57a742;"Merge pull request #1026 from Zac-HD/from-recursive-type  Handle forward references and recursion in from_type"
strategies.py;1043;DELETED;Zac Hatfield Dodds;Zac-HD@users.noreply.github.com;2018-01-13 21:30:12+11:00;90c7a3e9c0d51984fbd14c76ebc272c3fa57a742;""
engine.py;1441;ADD;David R. MacIver;david@drmaciver.com;2018-01-19 10:19:23+00:00;d4a0fc23138a0cde01789a4437bdea6a7b667028;"Change how we track whether a block is shrinking"
engine.py;1441;ADD;David R. MacIver;david.maciver@gmail.com;2018-01-20 15:04:24+00:00;f6e19586c4a209f984eb95220cf2326eff712259;"Merge pull request #1077 from HypothesisWorks/DRMacIver/precise-shrinking-blocks  Change how we track whether a block is shrinking"
strategies.py;395;ADD;David R. MacIver;david@drmaciver.com;2018-01-21 16:07:25+00:00;f542d03cae836a561e5cdc728be363f300e7c3f1;"Add notion of labels to strategies"
strategies.py;395;ADD;David R. MacIver;david.maciver@gmail.com;2018-01-22 08:52:34+00:00;61bd823303bde4ed7bb81b832173d94fcf875ae5;"Merge pull request #1067 from HypothesisWorks/DRMacIver/structural-hashing  Add purely structural tags to ConjectureData"
test_strategy_state.py;90;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2018-04-08 18:56:19+10:00;0879ca7ee3baad43d0f5cc472a195e88dd3b5a4f;"Deprecate and disable min_satisfying_examples"
test_strategy_state.py;113;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2018-04-08 18:56:19+10:00;0879ca7ee3baad43d0f5cc472a195e88dd3b5a4f;""
test_strategy_state.py;90;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-04-17 20:15:01+10:00;0602fed3f1443f3b5892bded27d06ee7e40a04c5;"Merge pull request #1211 from Zac-HD/rational-settings  Deprecate more settings to clarify and simplify the system"
test_strategy_state.py;113;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-04-17 20:15:01+10:00;0602fed3f1443f3b5892bded27d06ee7e40a04c5;""
deploy.py;106;DELETED;David R. MacIver;david@drmaciver.com;2018-04-12 13:18:14+01:00;46ba1e5855cd9e9cb02ed9e2584e848f0fb564b8;"Change top level build system to custom runner"
__main__.py;181;ADD;David R. MacIver;david@drmaciver.com;2018-04-12 13:18:14+01:00;46ba1e5855cd9e9cb02ed9e2584e848f0fb564b8;""
__main__.py;492;ADD;David R. MacIver;david@drmaciver.com;2018-04-12 13:18:14+01:00;46ba1e5855cd9e9cb02ed9e2584e848f0fb564b8;""
__main__.py;430;ADD;David R. MacIver;david@drmaciver.com;2018-04-13 09:16:23+01:00;c6c698aab38c681f4b6044eb4218376255d9fef3;"Try to get the interpreters to line up with what tox expects"
__main__.py;450;DELETED;David R. MacIver;david@drmaciver.com;2018-04-13 09:16:23+01:00;c6c698aab38c681f4b6044eb4218376255d9fef3;""
deploy.py;106;DELETED;David R. MacIver;david.maciver@gmail.com;2018-04-21 18:53:00+01:00;b305ffde3b76e73e2d402a815aba2451c144f89e;"Merge pull request #1227 from HypothesisWorks/DRMacIver/extract-tools  Move build system over to custom runner"
__main__.py;138;ADD;David R. MacIver;david.maciver@gmail.com;2018-04-21 18:53:00+01:00;b305ffde3b76e73e2d402a815aba2451c144f89e;""
__main__.py;420;ADD;David R. MacIver;david.maciver@gmail.com;2018-04-21 18:53:00+01:00;b305ffde3b76e73e2d402a815aba2451c144f89e;""
strategies.py;152;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2018-04-14 12:59:57+10:00;02c32181234c3d74b644ec6ac103c145f981bd3a;"Make MyPy pass on Hypothesis"
strategies.py;173;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2018-04-14 12:59:57+10:00;02c32181234c3d74b644ec6ac103c145f981bd3a;""
strategies.py;152;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-04-22 19:33:22+10:00;92f2828ace632e876a5f289180b952b4a3a7f46d;"Merge pull request #1237 from Zac-HD/typed  Add basic static typing to the Hypothesis API"
strategies.py;173;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-04-22 19:33:22+10:00;92f2828ace632e876a5f289180b952b4a3a7f46d;""
strategies.py;1146;DELETED;David R. MacIver;david@drmaciver.com;2018-05-09 20:57:53+01:00;082bece24ba7c35c03ce8be8ba662ceeaddf4115;"Move imports in hypothesis.strategies to top level"
strategies.py;1172;DELETED;David R. MacIver;david@drmaciver.com;2018-05-09 20:57:53+01:00;082bece24ba7c35c03ce8be8ba662ceeaddf4115;""
utils.py;126;DELETED;David R. MacIver;david@drmaciver.com;2018-05-09 16:26:50+01:00;f98d1a5c1b6ca1f6e9840bf3c4784bc68184e930;"Don't import numpy inside a function"
utils.py;126;DELETED;David R. MacIver;david.maciver@gmail.com;2018-05-10 13:41:39+01:00;cedbafe52934e5f710be41c51044388ef3047850;"Merge pull request #1271 from HypothesisWorks/DRMacIver/no-local-imports  Remove (most) use of local imports and class definitions"
strategies.py;74;ADD;David R. MacIver;david.maciver@gmail.com;2018-05-10 13:41:39+01:00;cedbafe52934e5f710be41c51044388ef3047850;""
strategies.py;1147;DELETED;David R. MacIver;david.maciver@gmail.com;2018-05-10 13:41:39+01:00;cedbafe52934e5f710be41c51044388ef3047850;""
strategies.py;1173;DELETED;David R. MacIver;david.maciver@gmail.com;2018-05-10 13:41:39+01:00;cedbafe52934e5f710be41c51044388ef3047850;""
configuration.py;35;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;"Merge in Hypothesis for Ruby"
core.py;369;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
core.py;375;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
core.py;381;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
database.py;217;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
database.py;238;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
database.py;258;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
database.py;282;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
database.py;301;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
database.py;334;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
executors.py;42;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
fakefactory.py;89;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
pytestplugin.py;78;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
charmap.py;85;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
charmap.py;303;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
charmap.py;354;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
compat.py;265;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
engine.py;197;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
engine.py;287;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
engine.py;439;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
engine.py;879;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
engine.py;883;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
engine.py;887;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
engine.py;922;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
engine.py;1153;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
engine.py;1465;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
coverage.py;49;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
escalation.py;43;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
reflection.py;74;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
reflection.py;78;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
reflection.py;82;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
reflection.py;86;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
reflection.py;310;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
reflection.py;336;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
reflection.py;412;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
lazy.py;40;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
lazy.py;53;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
lazy.py;58;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
strategies.py;115;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
strategies.py;128;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
strategies.py;166;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
strategies.py;393;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
types.py;137;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
types.py;147;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
types.py;152;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
types.py;170;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
stateful.py;113;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
stateful.py;193;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
stateful.py;497;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
stateful.py;513;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
strategies.py;74;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
strategies.py;287;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
pretty.py;368;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
pretty.py;496;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
debug.py;106;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_cache_implementation.py;97;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_cache_implementation.py;106;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_database_backend.py;61;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_database_usage.py;58;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_database_usage.py;89;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_database_usage.py;116;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_duplication.py;60;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_flakiness.py;99;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_flakiness.py;122;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_reproduce_failure.py;46;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_testdecorators.py;204;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_testdecorators.py;313;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_basic_configuration.py;80;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_collective_minimization.py;53;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_conjecture_utils.py;45;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_deferred_strategies.py;70;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_integers.py;42;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
test_sampled_from.py;36;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
__main__.py;158;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
__main__.py;440;ADD;David R. MacIver;david@drmaciver.com;2018-05-12 17:42:51+01:00;68390afad469a051e40ac15794ec36295f80392f;""
stateful.py;555;ADD;Emmanuel Leblond;emmanuel.leblond@gmail.com;2018-05-16 15:15:22+02:00;c3b6168bbdfca5b2e91035337c226c10b6ed357b;"Add stateful initialize decorator"
stateful.py;634;ADD;Emmanuel Leblond;emmanuel.leblond@gmail.com;2018-05-23 11:24:40+02:00;42d80e8e54f55c2d5110567c85d53de4d4fd6a57;"Stateful initialize rule is run in RuleBasedStateMachine.steps"
stateful.py;634;DELETED;Emmanuel Leblond;emmanuel.leblond@gmail.com;2018-05-23 15:26:15+02:00;e99d274864e3bf2fcbd47193a2e1aa3e78146548;"Stateful initialize rule are run in shuffled order"
__main__.py;146;DELETED;David R. MacIver;david@drmaciver.com;2018-05-23 13:47:16+01:00;2d2c4733bac2e7b6a352adc771ef4993ca7dcdfe;"Now that we have build stages we don't need that"
__main__.py;146;DELETED;David R. MacIver;david.maciver@gmail.com;2018-06-19 08:16:08+01:00;ce8116d5b431ca47cf409cf7fc055468e10dfb4a;"Merge pull request #1332 from HypothesisWorks/DRMacIver/factor-python-build  Factor out Python specific build components"
stateful.py;553;ADD;David R. MacIver;david.maciver@gmail.com;2018-06-19 16:11:33+01:00;a7d8da8ab6cc1f0d3ddaf279d57eae028cc14f27;"Merge pull request #1291 from touilleMan/stateful-init-rule  Add stateful initialize decorator"
junkdrawer.py;53;ADD;David R. MacIver;david@drmaciver.com;2018-06-22 10:01:06+01:00;ff21bc4c06bc4aacc797abe13f947b31c15306c5;"Unlink rubygems credentials correctly"
junkdrawer.py;53;ADD;David R. MacIver;david.maciver@gmail.com;2018-06-22 10:53:54+01:00;aa15faf74385715c27acfa1928f1665d7cec7ddc;"Merge pull request #1341 from HypothesisWorks/DRMacIver/fix-build  Fix building of rubygems"
test_sampled_from.py;36;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-06-26 15:25:56+10:00;c29d2584d1aa91d06158fb6542599206406e2512;"Simplify Numpy sampling test  Avoiding flakyness related to complex nan values"
test_sampled_from.py;36;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-06-26 19:01:03+10:00;5af81758d1f8c6458a822b0dd601bcab089dba20;"Merge pull request #1343 from Zac-HD/trio-experiment  Add mechanism to replace wrapped test"
core.py;400;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2018-07-01 14:46:44+10:00;f68faefe9885ea30fd9902b6878f178649e2ef1f;"Always report steps from stateful tests"
core.py;400;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-07-03 21:59:58+10:00;ed1981038bc3f39d481c3e040742dadc53f3495f;"Merge pull request #1373 from Zac-HD/stateful-steps  Always report steps from stateful tests"
test_deferred_strategies.py;72;DELETED;David R. MacIver;david@drmaciver.com;2018-07-31 18:32:08+01:00;faff2e8bd50d67491d0aa6d2d45b886bdb91e966;"Remove clever but not very useful test"
test_deferred_strategies.py;72;DELETED;David R. MacIver;david.maciver@gmail.com;2018-07-31 23:31:06+01:00;cbaf4f7759cd79497fad0d12005f7b53d0f959b1;"Merge pull request #1444 from HypothesisWorks/DRMacIver/ease-off-deferred  Remove clever but not very useful test"
engine.py;1281;ADD;David R. MacIver;david@drmaciver.com;2018-07-27 14:23:49+01:00;651ac7589f136c395ba979951b3527dc03c0b6f1;"Add a second level of caching inside the shrinker"
engine.py;1322;ADD;David R. MacIver;david@drmaciver.com;2018-07-27 14:23:49+01:00;651ac7589f136c395ba979951b3527dc03c0b6f1;""
engine.py;1281;ADD;David R. MacIver;david.maciver@gmail.com;2018-08-01 12:22:28+01:00;d86b532f34bd05388fd4cf59bd05b941be158cb0;"Merge pull request #1419 from HypothesisWorks/DRMacIver/moar-caching  Add a second level of caching inside the shrinker"
engine.py;1322;ADD;David R. MacIver;david.maciver@gmail.com;2018-08-01 12:22:28+01:00;d86b532f34bd05388fd4cf59bd05b941be158cb0;""
test_conjecture_engine.py;1624;ADD;David R. MacIver;david@drmaciver.com;2018-08-05 17:20:39+01:00;a809f88ff0d976d93119cef6cf71e233cca278b4;"Add unit tests for (almost) full coverage of engine"
test_conjecture_engine.py;1660;ADD;David R. MacIver;david.maciver@gmail.com;2018-08-05 18:22:10+01:00;1c5cc6b047fb04a8bbfccc31aa67ff44b469b2de;"Merge pull request #1472 from HypothesisWorks/DRMacIver/reliable-line-coverage  Fix off-by-one error and add lots of tests to conjecture engine"
engine.py;949;ADD;Stuart Cook;Zalathar@users.noreply.github.com;2018-08-16 22:12:49+10:00;6e1708acb38161c574688f8a384be53a12d3826d;"Check for capped bytes in cached_test_function"
engine.py;949;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-08-27 20:12:12+10:00;03af343119f632a8ef2e5deeb03941e7117fac30;"Merge pull request #1505 from Zalathar/cached-capped  Check for capped bytes in cached_test_function"
engine.py;1216;DELETED;David R. MacIver;david@drmaciver.com;2018-09-08 09:11:26+01:00;b4e5e44809ffc02ebb0c948a29008552e1d1c0fe;"Remove a lot of the underlying mechanisms for coverage based testing"
test_conjecture_engine.py;1488;DELETED;David R. MacIver;david@drmaciver.com;2018-09-08 09:11:26+01:00;b4e5e44809ffc02ebb0c948a29008552e1d1c0fe;""
engine.py;1216;DELETED;David R. MacIver;david.maciver@gmail.com;2018-09-08 15:11:23+01:00;0712b95e5cf942539e05da280fdd7a2c452a884c;"Merge pull request #1564 from HypothesisWorks/DRMacIver/no-coverage-for-you  Remove and deprecate coverage-guided testing"
test_conjecture_engine.py;1488;DELETED;David R. MacIver;david.maciver@gmail.com;2018-09-08 15:11:23+01:00;0712b95e5cf942539e05da280fdd7a2c452a884c;""
core.py;401;ADD;Sven Suska;immensly83@suska.org;2018-09-19 16:17:01+02:00;c0590940c5727639c437bf53cf44237c0db8a847;"Merge branch 'master' of https://github.com/HypothesisWorks/hypothesis (reintroduce require_relative)"
engine.py;1072;ADD;Sven Suska;immensly83@suska.org;2018-09-19 16:17:01+02:00;c0590940c5727639c437bf53cf44237c0db8a847;""
engine.py;1494;ADD;Sven Suska;immensly83@suska.org;2018-09-19 16:17:01+02:00;c0590940c5727639c437bf53cf44237c0db8a847;""
engine.py;1535;ADD;Sven Suska;immensly83@suska.org;2018-09-19 16:17:01+02:00;c0590940c5727639c437bf53cf44237c0db8a847;""
engine.py;1153;DELETED;Sven Suska;immensly83@suska.org;2018-09-19 16:17:01+02:00;c0590940c5727639c437bf53cf44237c0db8a847;""
stateful.py;675;ADD;Sven Suska;immensly83@suska.org;2018-09-19 16:17:01+02:00;c0590940c5727639c437bf53cf44237c0db8a847;""
test_deferred_strategies.py;70;DELETED;Sven Suska;immensly83@suska.org;2018-09-19 16:17:01+02:00;c0590940c5727639c437bf53cf44237c0db8a847;""
test_sampled_from.py;36;DELETED;Sven Suska;immensly83@suska.org;2018-09-19 16:17:01+02:00;c0590940c5727639c437bf53cf44237c0db8a847;""
__main__.py;146;DELETED;Sven Suska;immensly83@suska.org;2018-09-19 16:17:01+02:00;c0590940c5727639c437bf53cf44237c0db8a847;""
junkdrawer.py;54;ADD;Sven Suska;immensly83@suska.org;2018-09-19 16:17:01+02:00;c0590940c5727639c437bf53cf44237c0db8a847;""
stateful.py;117;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2018-09-29 23:00:06+10:00;1ee42eb0a892314cd11602c9ff9e27b1d4dbcb38;"Run stateful tests on @given, not find"
reflection.py;98;ADD;Zac-HD;zac.hatfield.dodds@gmail.com;2018-09-29 23:05:30+10:00;7cdddefeb4b1d47f74e2b07f3e9537db1575976e;"Reduce database key collisions  That is, make the database useful for stateful tests with the new backend."
reflection.py;98;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-12-18 13:41:30+11:00;99fd31a424c37544713c7a7ba3a0a9d8ed982fbb;"Merge pull request #1609 from Zac-HD/stateful-on-given  New given-based backend for stateful tests"
stateful.py;117;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-12-18 13:41:30+11:00;99fd31a424c37544713c7a7ba3a0a9d8ed982fbb;""
_strategies.py;129;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-12-22 01:29:22+11:00;8472e048c42d491187eeb1ca80126a222e1d7c2f;"Merge pull request #1703 from Zac-HD/better-tab-completion  Only expose public names in hypothesis.strategies"
_strategies.py;341;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-12-22 01:29:22+11:00;8472e048c42d491187eeb1ca80126a222e1d7c2f;""
strategies.py;129;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-12-22 01:29:22+11:00;8472e048c42d491187eeb1ca80126a222e1d7c2f;""
strategies.py;386;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2018-12-22 01:29:22+11:00;8472e048c42d491187eeb1ca80126a222e1d7c2f;""
costbounds.py;28;ADD;David R. MacIver;david@drmaciver.com;2018-12-31 13:31:24+00:00;6bb220ce198e33da73416323694d173ec551f91d;"New randomized algorithm for length deletion"
costbounds.py;28;ADD;David R. MacIver;david.maciver@gmail.com;2019-01-04 08:18:56+00:00;285633b4f6f30ea69beb3e6829ea23e29c91ec9c;"Merge pull request #1726 from HypothesisWorks/DRMacIver/randomize-length-deletion  New randomized algorithm for length shrinking"
engine.py;1492;DELETED;David R. MacIver;david@drmaciver.com;2019-01-07 10:16:18+00:00;debcaff0b390c013ecc7cb3e3f7c9a944a5070f9;"Factor out shrinker into its own file"
engine.py;1532;DELETED;David R. MacIver;david@drmaciver.com;2019-01-07 10:16:18+00:00;debcaff0b390c013ecc7cb3e3f7c9a944a5070f9;""
engine.py;1854;DELETED;David R. MacIver;david@drmaciver.com;2019-01-07 10:16:18+00:00;debcaff0b390c013ecc7cb3e3f7c9a944a5070f9;""
shrinker.py;283;ADD;David R. MacIver;david@drmaciver.com;2019-01-07 10:16:18+00:00;debcaff0b390c013ecc7cb3e3f7c9a944a5070f9;""
shrinker.py;323;ADD;David R. MacIver;david@drmaciver.com;2019-01-07 10:16:18+00:00;debcaff0b390c013ecc7cb3e3f7c9a944a5070f9;""
shrinker.py;645;ADD;David R. MacIver;david@drmaciver.com;2019-01-07 10:16:18+00:00;debcaff0b390c013ecc7cb3e3f7c9a944a5070f9;""
engine.py;1492;DELETED;David R. MacIver;david.maciver@gmail.com;2019-01-07 12:40:27+00:00;2b52a76cdfc862e3ff21f762fad1f984507598a8;"Merge pull request #1744 from HypothesisWorks/DRMacIver/factor-out-shrinker  Factor out shrinker into its own file"
engine.py;1532;DELETED;David R. MacIver;david.maciver@gmail.com;2019-01-07 12:40:27+00:00;2b52a76cdfc862e3ff21f762fad1f984507598a8;""
engine.py;1854;DELETED;David R. MacIver;david.maciver@gmail.com;2019-01-07 12:40:27+00:00;2b52a76cdfc862e3ff21f762fad1f984507598a8;""
shrinker.py;283;ADD;David R. MacIver;david.maciver@gmail.com;2019-01-07 12:40:27+00:00;2b52a76cdfc862e3ff21f762fad1f984507598a8;""
shrinker.py;323;ADD;David R. MacIver;david.maciver@gmail.com;2019-01-07 12:40:27+00:00;2b52a76cdfc862e3ff21f762fad1f984507598a8;""
shrinker.py;645;ADD;David R. MacIver;david.maciver@gmail.com;2019-01-07 12:40:27+00:00;2b52a76cdfc862e3ff21f762fad1f984507598a8;""
engine.py;1036;ADD;David R. MacIver;david@drmaciver.com;2019-01-07 11:38:49+00:00;25d2d5a9ba3cff8a64b6190c972162b6f7cfac2a;"Detect potential overflows in cached_test_function  This fixes a long-standing issue that we would often uselessly re-execute the test function in cases where we knew full well it couldn't possibly succeed. We do this by returning a dummy standin object for a full ConjectureData instance.  This allows us to unify prescreen_buffer and cached_test_function because the former only existed to handle cases that are now correctly handled by the latter."
engine.py;1031;DELETED;David R. MacIver;david@drmaciver.com;2019-01-07 11:38:49+00:00;25d2d5a9ba3cff8a64b6190c972162b6f7cfac2a;""
engine.py;1039;DELETED;David R. MacIver;david@drmaciver.com;2019-01-07 11:38:49+00:00;25d2d5a9ba3cff8a64b6190c972162b6f7cfac2a;""
engine.py;1043;DELETED;David R. MacIver;david@drmaciver.com;2019-01-07 11:38:49+00:00;25d2d5a9ba3cff8a64b6190c972162b6f7cfac2a;""
engine.py;1036;ADD;David R. MacIver;david.maciver@gmail.com;2019-01-09 13:00:00+00:00;29fb9ebd777d021c595c562953f68fd5a6d8b705;"Merge pull request #1745 from HypothesisWorks/DRMacIver/cache-overflows  Detect potential overflows in cached_test_function"
engine.py;1031;DELETED;David R. MacIver;david.maciver@gmail.com;2019-01-09 13:00:00+00:00;29fb9ebd777d021c595c562953f68fd5a6d8b705;""
engine.py;1039;DELETED;David R. MacIver;david.maciver@gmail.com;2019-01-09 13:00:00+00:00;29fb9ebd777d021c595c562953f68fd5a6d8b705;""
engine.py;1043;DELETED;David R. MacIver;david.maciver@gmail.com;2019-01-09 13:00:00+00:00;29fb9ebd777d021c595c562953f68fd5a6d8b705;""
datatree.py;99;ADD;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;"Factor out tree logic"
datatree.py;190;ADD;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;""
datatree.py;239;ADD;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;""
datatree.py;243;ADD;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;""
datatree.py;253;ADD;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;""
engine.py;841;ADD;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;""
engine.py;250;DELETED;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;""
engine.py;402;DELETED;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;""
engine.py;1022;DELETED;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;""
engine.py;1026;DELETED;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;""
engine.py;1036;DELETED;David R. MacIver;david@drmaciver.com;2019-01-08 17:20:09+00:00;49c63a636bbf29897b8f3a7966392fa9588ccb85;""
engine.py;841;DELETED;David R. MacIver;david@drmaciver.com;2019-01-10 14:01:23+00:00;b92592b959ae2fd9dba10ccb5e324d07a233a799;"Rename cached_test_function on DataTree and use None to signal absence"
datatree.py;99;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-11 17:18:49+11:00;ec02c475097f5e19fc1ed0af4f5ec1afefeed2fe;"Merge pull request #1752 from HypothesisWorks/DRMacIver/factor-out-tree  Factor out tree logic from ConjectureRunner"
datatree.py;190;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-11 17:18:49+11:00;ec02c475097f5e19fc1ed0af4f5ec1afefeed2fe;""
datatree.py;246;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-11 17:18:49+11:00;ec02c475097f5e19fc1ed0af4f5ec1afefeed2fe;""
datatree.py;250;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-11 17:18:49+11:00;ec02c475097f5e19fc1ed0af4f5ec1afefeed2fe;""
datatree.py;260;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-11 17:18:49+11:00;ec02c475097f5e19fc1ed0af4f5ec1afefeed2fe;""
engine.py;250;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-11 17:18:49+11:00;ec02c475097f5e19fc1ed0af4f5ec1afefeed2fe;""
engine.py;402;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-11 17:18:49+11:00;ec02c475097f5e19fc1ed0af4f5ec1afefeed2fe;""
engine.py;1022;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-11 17:18:49+11:00;ec02c475097f5e19fc1ed0af4f5ec1afefeed2fe;""
engine.py;1026;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-11 17:18:49+11:00;ec02c475097f5e19fc1ed0af4f5ec1afefeed2fe;""
engine.py;1036;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-11 17:18:49+11:00;ec02c475097f5e19fc1ed0af4f5ec1afefeed2fe;""
fakefactory.py;87;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2018-03-09 23:53:47+11:00;4ae6cdd787fa480f05e2a28f03a838313423db6f;"Remove deprecated Faker integration"
database.py;219;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2018-03-17 14:18:22+11:00;6546fbfdb94bd70344a3ab2be860d677a6fddfc5;"Remove SQLite database"
database.py;246;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2018-03-17 14:18:22+11:00;6546fbfdb94bd70344a3ab2be860d677a6fddfc5;""
test_database_backend.py;66;DELETED;Zac-HD;zac.hatfield.dodds@gmail.com;2018-03-17 14:18:22+11:00;6546fbfdb94bd70344a3ab2be860d677a6fddfc5;""
database.py;219;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-14 23:36:13+11:00;8b035ee85ddb3c69d06570d816b76fa5572c948b;"Merge pull request #1712 from Zac-HD/hypothesis4  New major version: Hypothesis 4.0"
database.py;246;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-14 23:36:13+11:00;8b035ee85ddb3c69d06570d816b76fa5572c948b;""
fakefactory.py;87;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-14 23:36:13+11:00;8b035ee85ddb3c69d06570d816b76fa5572c948b;""
test_database_backend.py;66;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-14 23:36:13+11:00;8b035ee85ddb3c69d06570d816b76fa5572c948b;""
test_conjecture_data_tree.py;48;ADD;David R. MacIver;david@drmaciver.com;2019-01-11 10:37:17+00:00;cd33020e13ac7958bd74a1075c03e3248ed8ef63;"Add tests specific to data tree"
engine.py;797;ADD;David R. MacIver;david@drmaciver.com;2019-01-23 09:52:36+00:00;0746da1bcd8e3add52a3435a3982e10d8e1ebf3a;"Only store status in the tree"
engine.py;804;ADD;David R. MacIver;david@drmaciver.com;2019-01-23 09:52:36+00:00;0746da1bcd8e3add52a3435a3982e10d8e1ebf3a;""
shrinker.py;393;DELETED;David R. MacIver;david@drmaciver.com;2019-01-23 09:52:36+00:00;0746da1bcd8e3add52a3435a3982e10d8e1ebf3a;""
shrinker.py;438;DELETED;David R. MacIver;david@drmaciver.com;2019-01-23 09:52:36+00:00;0746da1bcd8e3add52a3435a3982e10d8e1ebf3a;""
engine.py;797;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-25 09:09:05+11:00;e5c154a8073f26e93d093473bfdd88d67af41e6d;"Merge pull request #1767 from HypothesisWorks/DRMacIver/compact-tree  Don't store the entire ConjectureData object in the tree"
engine.py;804;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-25 09:09:05+11:00;e5c154a8073f26e93d093473bfdd88d67af41e6d;""
shrinker.py;393;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-25 09:09:05+11:00;e5c154a8073f26e93d093473bfdd88d67af41e6d;""
shrinker.py;438;DELETED;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-25 09:09:05+11:00;e5c154a8073f26e93d093473bfdd88d67af41e6d;""
test_conjecture_data_tree.py;44;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-01-25 09:09:05+11:00;e5c154a8073f26e93d093473bfdd88d67af41e6d;""
shrinker.py;1434;ADD;David R. MacIver;david@drmaciver.com;2019-02-06 15:29:04+00:00;3ccd4ea5dc6c387cc09441449700987b46c7e404;"Add an explicit definition of the shrink passes that decomposes them by their arguments"
shrinker.py;1434;DELETED;David R. MacIver;david@drmaciver.com;2019-02-07 15:12:16+00:00;bf72cca243a94556d04070bc84b9d79fdb0efe65;"Move book keeping logic into shrink pass"
test_conjecture_test_data.py;170;ADD;David R. MacIver;david@drmaciver.com;2019-02-21 07:36:32+00:00;23207e5ef6d5bf426ccb7b6ea666d1a63cb89d9f;"Compute examples lazily on demand"
test_conjecture_test_data.py;170;ADD;David R. MacIver;david.maciver@gmail.com;2019-02-22 08:55:47+00:00;68d69da5a9f4fbc871e291dedee48d10f0c351d7;"Merge pull request #1828 from HypothesisWorks/DRMacIver/lazy-examples  Compute examples lazily on demand"
shrinker.py;1362;ADD;David R. MacIver;david@drmaciver.com;2019-02-23 12:35:46+00:00;067647748ce220b143cafe0a688eba31a1188dea;"Add notion of stable identifiers"
shrinker.py;1365;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-02-28 13:46:10+11:00;c0d5fddd43a9c530a9fdaaf24b315a23cabe6920;"Merge pull request #1836 from HypothesisWorks/DRMacIver/use-stable-identifiers  Don't recalculate shrink pass argument on usage"
junkdrawer.py;66;ADD;David R. MacIver;david@drmaciver.com;2019-02-28 15:42:28+00:00;2d09c648ce44da563881b27d17ec53e01bb7fdb1;"Add equality to IntList and some basic features"
junkdrawer.py;66;ADD;David R. MacIver;david.maciver@gmail.com;2019-03-04 07:48:12+00:00;bc4dd280b4ee1a6157ff1d8d8d2de77037df8b5c;"Merge pull request #1849 from HypothesisWorks/DRMacIver/faster-block-check  Speed up checks for structural changes in the shrink target"
datatree.py;99;DELETED;David R. MacIver;david@drmaciver.com;2019-03-07 07:36:03+00:00;ad4efadd15d77964e56152a3daff8084f5f96ddb;"Replace tree with dummy implementation"
datatree.py;191;DELETED;David R. MacIver;david@drmaciver.com;2019-03-07 07:36:03+00:00;ad4efadd15d77964e56152a3daff8084f5f96ddb;""
datatree.py;242;DELETED;David R. MacIver;david@drmaciver.com;2019-03-07 07:36:03+00:00;ad4efadd15d77964e56152a3daff8084f5f96ddb;""
datatree.py;246;DELETED;David R. MacIver;david@drmaciver.com;2019-03-07 07:36:03+00:00;ad4efadd15d77964e56152a3daff8084f5f96ddb;""
datatree.py;256;DELETED;David R. MacIver;david@drmaciver.com;2019-03-07 07:36:03+00:00;ad4efadd15d77964e56152a3daff8084f5f96ddb;""
test_conjecture_data_tree.py;44;DELETED;David R. MacIver;david@drmaciver.com;2019-03-07 07:36:03+00:00;b75a22ca912badd77c35b030f98eb59248e6e115;"Tests for new functionality"
datatree.py;252;ADD;David R. MacIver;david@drmaciver.com;2019-03-07 07:36:03+00:00;1e38127418639a5fc0bf16748432bc8e3239d7c7;"Implement rewrite"
datatree.py;326;ADD;David R. MacIver;david.maciver@gmail.com;2019-03-11 15:22:39+00:00;3817ee586efa65de0aa196234dd75bab257e5953;"Merge pull request #1846 from HypothesisWorks/DRMacIver/observation-tree  New Patricia trie based example cache"
datatree.py;99;DELETED;David R. MacIver;david.maciver@gmail.com;2019-03-11 15:22:39+00:00;3817ee586efa65de0aa196234dd75bab257e5953;""
datatree.py;191;DELETED;David R. MacIver;david.maciver@gmail.com;2019-03-11 15:22:39+00:00;3817ee586efa65de0aa196234dd75bab257e5953;""
datatree.py;242;DELETED;David R. MacIver;david.maciver@gmail.com;2019-03-11 15:22:39+00:00;3817ee586efa65de0aa196234dd75bab257e5953;""
datatree.py;246;DELETED;David R. MacIver;david.maciver@gmail.com;2019-03-11 15:22:39+00:00;3817ee586efa65de0aa196234dd75bab257e5953;""
datatree.py;256;DELETED;David R. MacIver;david.maciver@gmail.com;2019-03-11 15:22:39+00:00;3817ee586efa65de0aa196234dd75bab257e5953;""
test_conjecture_data_tree.py;44;DELETED;David R. MacIver;david.maciver@gmail.com;2019-03-11 15:22:39+00:00;3817ee586efa65de0aa196234dd75bab257e5953;""
shrinker.py;1431;DELETED;David R. MacIver;david@drmaciver.com;2019-03-15 11:26:36+00:00;1b1cc2ae3b8c6c1cb539abcfdac61a43227dbe06;"Use indices as stable identifiers"
shrinker.py;1431;DELETED;David R. MacIver;david.maciver@gmail.com;2019-03-15 16:58:42+00:00;0449dc7029d0a2d8253de3319f7167aac221266c;"Merge pull request #1875 from HypothesisWorks/DRMacIver/deletion-and-identifiers  Improve memory usage and speed of long-running shrinks"
test_conjecture_engine.py;294;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-03-21 00:09:14+11:00;a74069866bf1ad516b82b5eb32bedd72680f0cab;"Find multiple bugs in generation phase"
test_conjecture_engine.py;294;ADD;Zac Hatfield-Dodds;Zac-HD@users.noreply.github.com;2019-04-16 22:18:16+10:00;26dc7fb16b8020490562aaefb999ccdeb42883c9;"Merge pull request #1781 from Zac-HD/generate-multiple-bugs  Multi-bug discovery during generation"
