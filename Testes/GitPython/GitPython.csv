Filename;Linha;Tipo;Autor;Email;Data;Hash;Commit
cmd.py;212;ADD;Florian Apolloner;florian@apolloner.eu;2008-06-21 18:44:07+02:00;c63cd9873bf733c068a5f183442ec82873fef1fc;"continued yesterdays work on the execute stuff"
cmd.py;209;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-11 16:49:05+02:00;9374a916588d9fe7169937ba262c86ad710cfa74;"converted all spaces to tabs ( 4 spaces = 1 tab ) just to allow me and my editor to work with the files properly. Can convert it back for releaes"
cmd.py;209;DELETED;Sebastian Thiel;byronimo@gmail.com;2009-10-11 16:49:05+02:00;9374a916588d9fe7169937ba262c86ad710cfa74;""
cmd.py;209;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-11 22:50:44+02:00;3c0a65226f038c58fc6d6ed525f38fc00b3579b7;"Merge branch 'hierarchyfix' into improvements  * hierarchyfix:   Added remaining tests for new base classes and removed some methods whose existance was doubtful or unsafe   Fixed remaining tests to deal with the changes   commit: fixed failing commit tests as the mocked git command would always return the same thing which does not work anymore - re-implemented it in a more dynamic manner, but in the end tests will have to be revised anyway   mode-only change for test system - this should be in a separate repository in fact so that changes are a little more self-contained and not depending on the actual source repository   fixed issue in Ref.name implementation which would not handle components properly   lazymixin system now supports per-attribute baking, it is up to the class whether it bakes more. This also leads to more efficient use of memory as values are only cached and set when required - the baking system does not require an own tracking variable anymore, and values are only to be cached once - then python will natively find the cache without involving any additional overhead. This works by using __getattr__ instead of __get_attribute__ which would always be called   put Tree and Blob onto a new base class suitable to deal with IndexObjects   blob tests fixed to deal with changes to the Blob type   converted all spaces to tabs ( 4 spaces = 1 tab ) just to allow me and my editor to work with the files properly. Can convert it back for releaes   Re-designed the tag testing - it does not use fixtures anymore but dyamically checks the existance of tags within the repository - it basically tests the interface and checks that expected return types are actually returned   Intermediate commit: commit,tree and blob objects now derive from object - test is in place which still fails on purpose. Need to integrate tags which can be objects or just a special form of a ref   Renamed lazy.py to base.py to have a file for base classes - lazy not yet changed to allow proper rename tracking"
cmd.py;209;DELETED;Sebastian Thiel;byronimo@gmail.com;2009-10-11 22:50:44+02:00;3c0a65226f038c58fc6d6ed525f38fc00b3579b7;""
cmd.py;256;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-15 10:04:17+02:00;6226720b0e6a5f7cb9223fc50363def487831315;"Initial set of improvementes merged into master, including a class hierarchy redesign and performance improvements  Merge commit 'origin/improvements'  * commit 'origin/improvements': (38 commits)   test_performance: module containing benchmarks to get an idea of the achieved throughput   Removed plenty of mocked tree tests as they cannot work anymore with persistent commands that require stdin AND binary data - not even an adapter would help here. These tests will have to be replaced.   tree: now reads tress directly by parsing the binary data, allowing it to safe possibly hundreds of command calls   Refs are now truly dynamic - this costs a little bit of (persistent command) work, but assures refs behave as expected   persistent command signature changed to also return the hexsha from a possible input ref - the objects pointed to by refs are now baked on demand - perhaps it should change to always be re-retrieved using a property as it is relatively fast - this way refs can always be cached   test_blob: removed many redundant tests that would fail now as the mock cannot handle the complexity of the command backend   Implemented git command facility to keep persistent commands for fast object information retrieval   test: Added time-consuming test which could also be a benchmark in fact - currently it cause hundreds of command invocations which is slow   cmd: added option to return the process directly, allowing to read the output directly from the output stream   added Iterable interface to Ref type   renamed find_all to list_all, changed commit to use iterable interface in preparation for command changes   Added base for all iteratable objects   unified name of utils module, recently it was named util and utils in different packages   tree: renamed content_from_string to _from_string to make it private. Removed tests that were testing that method   tree: now behaves like a list with string indexing functionality - using a dict as cache is a problem as the tree is ordered, added blobs, trees and traverse method   test_base: Improved basic object creation as well as set hash tests   repo.active_branch now returns a Head object, not a string   IndexObjects are now checking their slots to raise a proper error message in case someone tries to access an unset path or mode - this information cannot be retrieved afterwards as IndexObject information is kept in the object that pointed at them. To find this information, one would have to search all objects which is not feasible   refs now take repo as first argument and derive from LazyMixin to allow them to dynamically retrieve their objects   renamed from_string and list_from_string to _from_string and _list_from_string to indicate their new status as private method, adjusted all callers respectively   ..."
cmd.py;210;DELETED;Sebastian Thiel;byronimo@gmail.com;2009-10-15 10:04:17+02:00;6226720b0e6a5f7cb9223fc50363def487831315;""
index.py;96;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-20 17:04:23+02:00;50a9920b1bd9e6e8cf452c774c499b0b9014ccef;"Added initial version of the index reading from file - IndexEntry interface is to be improved though, writing needs to be implemented as well"
index.py;460;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-22 00:32:16+02:00;aa921fee6014ef43bb2740240e9663e614e25662;"Implemented merge/resolve handling , but realized that index writing is not yet working properly as it is sha1 checked as well. This explains what my 20 byte 'extension_data' actually is ;)"
index.py;245;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-22 13:48:49+02:00;25945899a0067a2dbeeae7a8362a6d68bbc5c6ba;"Merge branch 'index' into improvements  * index:   Removed index test marker for custom commits as this boils down to a good way to add files to the index/remove them and make commits which are possibly customized with custom parents   index writing now creates a sha on the content making it possible to write valid indices after manually removing or altering entriesgst   Implemented merge/resolve handling , but realized that index writing is not yet working properly as it is sha1 checked as well. This explains what my 20 byte 'extension_data' actually is ;)   index: Added write_tree method including test   index.iter_blobs method added including tests ( which have been improved generally for more coverage )   tree.traverse: Added prune functionality - previously the predciate did both, pruning and preventing to return items   Improved testing of index against trees, tests succeed with next commit   Initial version of merge including tests for one-way, two-way and tree-way merge   index writing added including simple test, improved docs of IndexEntry   improved IndexEntry type and added test for parsing of the stage   Improved tuple access of EntryIndex class including test, stage and type access still needs to be decoded though   Added initial version of the index reading from file - IndexEntry interface is to be improved though, writing needs to be implemented as well   Added frame for index implementation and testing"
index.py;476;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-22 13:48:49+02:00;25945899a0067a2dbeeae7a8362a6d68bbc5c6ba;""
index.py;559;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-22 22:14:02+02:00;ea33fe8b21d2b02f902b131aba0d14389f2f8715;"Index: Is now diffable and appears to properly implement diffing against other items as well as the working tree Diff.Diffable: added callback allowing superclasses to preprocess diff arguments Diff.Diff: added eq, ne and hash methods, string methods would be nice"
index.py;559;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-22 22:22:00+02:00;b2a14e4b96a0ffc5353733b50266b477539ef899;"Merge branch 'index' into improvements  * index:   Index: Is now diffable and appears to properly implement diffing against other items as well as the working tree   default index writing now writes the index of the current repository in a fashion comparable to the native implementation   Added test for ConcurrentWriteOperation   utils: Added LockFile including test   Index now behaves more like the default index if no explicit stream is given. It will lazily read its data on first access"
refs.py;147;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-22 23:20:16+02:00;58e2157ad3aa9d75ef4abb90eb2d1f01fba0ba2b;"Added SymbolicReference and HEAD type to better represent these special types of references and allow special handling Head.reset now is an instance method of HEAD type Concatenated all reference specific tests into test_refs started to fix tests breaking now because of changed interface"
refs.py;147;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-23 00:14:24+02:00;00499d994fea6fb55a33c788f069782f917dbdd4;"Merge branch 'symbolic_ref' into improvements  * symbolic_ref:   SymbolicReferences can now change they references safely as I think and well controlled, including test.   Adjusted tests to deal with API changes   Added SymbolicReference and HEAD type to better represent these special types of references and allow special handling"
index.py;193;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-23 10:42:26+02:00;a10aa36bc6a82bd50df6f3df7d6b7ce04a7070f1;"Renamed Index to IndexFile, adjusted tests, it will only operate on physical files, not on streams, as Indices are not streamed by any git command ( at least not in raw format )"
index.py;278;DELETED;Sebastian Thiel;byronimo@gmail.com;2009-10-23 10:42:26+02:00;a10aa36bc6a82bd50df6f3df7d6b7ce04a7070f1;""
index.py;249;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-26 23:24:56+01:00;2792e534dd55fe03bca302f87a3ea638a7278bf1;"Merge branch 'index' into improvements  * index:   index.add: Finished implemenation including through tests   When parsing trees, we now store the originan type bits as well, previously we dropped it   cmd.wait: AutoKill wrapped process will automatically raise on errors to unify error handling amongst clients using the process directly. It might be needed to add a flag allowing to easily override that   added head kwarg to reset and commit method, allowing to automatically change the head to the given commit, which makes the methods more versatile   refs.SymoblicRef: implemented direcft setting of the symbolic references commit, which possibly dereferences to the respective head   index.commit: implemented initial version, but in fact some more changes are required to have a nice API. Tests are not yet fully done either   actor: added __eq__, __ne__ and __hash__ methods including simple test   index.remove implemented including throrough test   Implemented index.reset method including test   IndexEntry is now based on a 'minimal' version that is suitable to be fed into UpdateIndex. The Inode and device information is only needed to quickly compare the index against the working tree for changes, hence it should not be that dominant in the API either. More changes to come   Added notes about git-update-ref   Refs can now set the reference they are pointing to in a controlled fashion by writing their ref file directly   Added TagRefernce creation and deletion including tests   Implemented head methods: create, delete, rename, including tests   refs: added create, delete and rename methods where appropriate. Tests are marked, implementation is needed for most of them   Added frame for IndexFile add/remove/commit methods and respective test markers   Added repo.index property including simple test, and additional ideas in the TODO list   Renamed Index to IndexFile, adjusted tests, it will only operate on physical files, not on streams, as Indices are not streamed by any git command ( at least not in raw format )"
index.py;278;DELETED;Sebastian Thiel;byronimo@gmail.com;2009-10-26 23:24:56+01:00;2792e534dd55fe03bca302f87a3ea638a7278bf1;""
helper.py;154;ADD;Sebastian Thiel;byronimo@gmail.com;2009-10-28 18:09:18+01:00;a519942a295cc39af4eebb7ba74b184decae13fb;"Tried to use shallow repository - this works in case it is remote, but unfortunately, deepening the repository fails if the server is used. This is bad, but a workaround is to create another shared repo which pushes a changes that we fetch into our given repo. This should provide more output to properly test the fetch handling. Harder than I thought"
test_remote.py;34;ADD;Sebastian Thiel;byronimo@gmail.com;2009-11-03 14:04:32+01:00;e70f3218e910d2b3dcb8a5ab40c65b6bd7a8e9a8;"Intermediate commit with a few added and improved tests as well as many fixes"
test_remote.py;34;ADD;Sebastian Thiel;byronimo@gmail.com;2009-11-03 14:50:29+01:00;615fc1984b0cc09c8eeab51a1d1c4e05b583b4a7;"Merge branch 'remotes' into improvements  * remotes:   Finished all push tests I could think of so far. More error cases should be studied, but they would be hard to 'produce'   Intermediate commit with a few added and improved tests as well as many fixes   Implemented PushProgress and PushInfo class including basic test cases. Now many more test-cases need to be added to be sure we can truly deal with everything git throws at us   Added frame for push testing and push implemenation   Another attempt to make fetch emit progress information, but in fact its proven now that this is not happening if stderr is being redirected. A test is in place that will most likely fail in case this ever changes   Added repo.refs for completeness (as remote.refs is there as well and quite nice to use)   Tried to use shallow repository - this works in case it is remote, but unfortunately, deepening the repository fails if the server is used. This is bad, but a workaround is to create another shared repo which pushes a changes that we fetch into our given repo. This should provide more output to properly test the fetch handling. Harder than I thought   Fixed bug when listing remotes - it was based on references which is incorrect as it cannot always work   FetchInfo class is not a subclass of Remote class anymore, as more classes are to be added it cluttered up the view and made things more complex as well   IterableList: added support for prefix allowing remote.refs.master constructs, previously it was remote.refs['%s/master'%remote]   tag handling tests finished, unfortunately there is not yet a rejected case, but it will assuambly follow with the push tests   Implemented handling of FETCH_HEAD and tags, some test cases still missing dealing with deletion and movements of remote tags ( which in fact is discouraged, but we should be able to deal with it, shouldnt we ;)   Added special cases to test that shows we cannot yet:   Added remote stale_refs property including test, tested new remote branch handling and deletion of stale remote branches   renamed remote_branch to remote_head, improved errror message   Added non-fast forward test case, fixed parsing issue caused by initial line stripping   implemented test for rejection handling and fixed a bug when parsing remote reference paths   Added testing frame for proper fetch testing to be very sure this works as expected. Plenty of cases still to be tested   Reference._from_string will now create the appropriate type, not just the type of the actual class. This could result in a symbolic reference returned even though you technically requested a reference - this issue must still be addressed.   put _make_file helper method into TestBase class"
helper.py;154;ADD;Sebastian Thiel;byronimo@gmail.com;2009-11-03 14:50:29+01:00;615fc1984b0cc09c8eeab51a1d1c4e05b583b4a7;""
index.py;250;ADD;Sebastian Thiel;byronimo@gmail.com;2009-11-04 19:53:42+01:00;d884adc80c80300b4cc05321494713904ef1df2d;"Merge branch 'improvements'"
index.py;547;ADD;Sebastian Thiel;byronimo@gmail.com;2009-11-04 19:53:42+01:00;d884adc80c80300b4cc05321494713904ef1df2d;""
index.py;592;ADD;Sebastian Thiel;byronimo@gmail.com;2009-11-04 19:53:42+01:00;d884adc80c80300b4cc05321494713904ef1df2d;""
refs.py;191;ADD;Sebastian Thiel;byronimo@gmail.com;2009-11-04 19:53:42+01:00;d884adc80c80300b4cc05321494713904ef1df2d;""
test_remote.py;34;ADD;Sebastian Thiel;byronimo@gmail.com;2009-11-04 19:53:42+01:00;d884adc80c80300b4cc05321494713904ef1df2d;""
helper.py;154;ADD;Sebastian Thiel;byronimo@gmail.com;2009-11-04 19:53:42+01:00;d884adc80c80300b4cc05321494713904ef1df2d;""
refs.py;329;ADD;Sebastian Thiel;byronimo@gmail.com;2009-11-26 12:28:13+01:00;0d638bf6e55bc64c230999c9e42ed1b02505d0ce;"Initially put SymbolicRef as base class of Reference, which theoretically is how it should be, but many tests are still failing as the implementation is not yet there"
refs.py;191;DELETED;Sebastian Thiel;byronimo@gmail.com;2009-11-26 12:28:13+01:00;0d638bf6e55bc64c230999c9e42ed1b02505d0ce;""
refs.py;492;ADD;Sebastian Thiel;byronimo@gmail.com;2009-12-04 11:55:01+01:00;ac4133f51817145e99b896c7063584d4dd18ad59;"SymbolicRefence base is now fully aware of pack files in all operations. Ref(anytype) Iteration was improved such that automatic filtering now also works for SymbolicReferences ( which only return symbolic refs)"
refs.py;934;ADD;Sebastian Thiel;byronimo@gmail.com;2009-12-04 11:55:01+01:00;ac4133f51817145e99b896c7063584d4dd18ad59;""
refs.py;497;DELETED;Sebastian Thiel;byronimo@gmail.com;2009-12-04 11:55:01+01:00;ac4133f51817145e99b896c7063584d4dd18ad59;""
index.py;63;ADD;Sebastian Thiel;byronimo@gmail.com;2009-12-10 21:05:57+01:00;54844a90b97fd7854e53a9aec85bf60564362a02;"index: TempFileMover now handles the case that the file to move does not exist more gracefully Added BlockingLockFile which may be used to wait for the lock according to some criteria"
test_repo.py;117;ADD;Sebastian Thiel;byronimo@gmail.com;2010-02-13 19:48:40+01:00;15ee0ac0d56a5fb5ba13fae4288621ddd2185f17;"IndexFile: unmerged_blobs lists are now sorted Repo.init: fixed incorrect use of the path which was to optionally specify where to initialize the repository. Update test as well"
cmd.py;326;ADD;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;"Converted all tabs to 4 space characters each to comply with pep8"
cmd.py;326;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
index.py;63;ADD;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
index.py;319;ADD;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
index.py;755;ADD;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
index.py;806;ADD;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
index.py;63;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
index.py;319;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
index.py;755;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
index.py;806;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
refs.py;507;ADD;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
refs.py;949;ADD;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
refs.py;507;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
refs.py;949;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
test_remote.py;36;ADD;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
test_remote.py;36;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
test_repo.py;117;ADD;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
test_repo.py;117;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
helper.py;180;ADD;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
helper.py;180;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-03-04 09:06:03+01:00;72bcdbd0a0c8cc6aa2a7433169aa49c7fc19b55b;""
index.py;63;ADD;Sebastian Thiel;byronimo@gmail.com;2010-05-10 19:32:45+02:00;837c32ba7ff2a3aa566a3b8e1330e3db0b4841d8;"repo: added test with some basic assertions for empty repositories  these repo.is_dirty: Will not fail on empty repo ( anymore ) index.entries: will just be empty if the repository is empty refs: added to_full_path method which can be used to create fully synthetic instances of Reference types, added a test for it  Converted all touched files to spaces, which is why git reports so many changed files. Actually I was thinking every file would use spaces, but apparently not"
index.py;326;ADD;Sebastian Thiel;byronimo@gmail.com;2010-05-10 19:32:45+02:00;837c32ba7ff2a3aa566a3b8e1330e3db0b4841d8;""
index.py;771;ADD;Sebastian Thiel;byronimo@gmail.com;2010-05-10 19:32:45+02:00;837c32ba7ff2a3aa566a3b8e1330e3db0b4841d8;""
index.py;822;ADD;Sebastian Thiel;byronimo@gmail.com;2010-05-10 19:32:45+02:00;837c32ba7ff2a3aa566a3b8e1330e3db0b4841d8;""
index.py;63;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-05-10 19:32:45+02:00;837c32ba7ff2a3aa566a3b8e1330e3db0b4841d8;""
index.py;319;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-05-10 19:32:45+02:00;837c32ba7ff2a3aa566a3b8e1330e3db0b4841d8;""
index.py;764;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-05-10 19:32:45+02:00;837c32ba7ff2a3aa566a3b8e1330e3db0b4841d8;""
index.py;815;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-05-10 19:32:45+02:00;837c32ba7ff2a3aa566a3b8e1330e3db0b4841d8;""
index.py;63;ADD;Sebastian Thiel;byronimo@gmail.com;2010-05-10 22:04:40+02:00;c083f3d0b853e723d0d4b00ff2f1ec5f65f05cba;"index.add: added index path rewrite functionality, which allows to store a different path in the index than the actual one on disk ( from which the object will be created ) Fixed bug the way newlines were handled, which  hopefully fixes occasional hangs as well. It works fine with git 1.7.1 Most of the changes are due to the tab-space conversion - its weird once more as I thought it was all in spaces before ... ."
index.py;326;ADD;Sebastian Thiel;byronimo@gmail.com;2010-05-10 22:04:40+02:00;c083f3d0b853e723d0d4b00ff2f1ec5f65f05cba;""
index.py;786;ADD;Sebastian Thiel;byronimo@gmail.com;2010-05-10 22:04:40+02:00;c083f3d0b853e723d0d4b00ff2f1ec5f65f05cba;""
index.py;837;ADD;Sebastian Thiel;byronimo@gmail.com;2010-05-10 22:04:40+02:00;c083f3d0b853e723d0d4b00ff2f1ec5f65f05cba;""
index.py;63;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-05-10 22:04:40+02:00;c083f3d0b853e723d0d4b00ff2f1ec5f65f05cba;""
index.py;326;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-05-10 22:04:40+02:00;c083f3d0b853e723d0d4b00ff2f1ec5f65f05cba;""
index.py;771;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-05-10 22:04:40+02:00;c083f3d0b853e723d0d4b00ff2f1ec5f65f05cba;""
index.py;822;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-05-10 22:04:40+02:00;c083f3d0b853e723d0d4b00ff2f1ec5f65f05cba;""
refs.py;151;ADD;Sebastian Thiel;byronimo@gmail.com;2010-05-26 22:34:40+02:00;de84cbdd0f9ef97fcd3477b31b040c57192e28d9;"refs: a Reference can now be created by assigning a commit or object (for convenience)"
cmd.py;419;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-02 12:30:33+02:00;8c1a87d11df666d308d14e4ae7ee0e9d614296b6;"commit: refactored existing code to decode commits from streams - performance is slightly better git.cmd: added method to provide access to the content stream directly. This is more efficient if large objects are handled, if it is actually used test.helpers: removed unnecessary code"
cmd.py;329;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-02 12:30:33+02:00;8c1a87d11df666d308d14e4ae7ee0e9d614296b6;""
test_repo.py;146;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-02 17:39:17+02:00;538820055ce1bf9dd07ecda48210832f96194504;"git.cmd: added test for stream section constraint used in git command, found bug of course which just didn't kick in yet"
test_repo.py;145;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-02 17:39:17+02:00;538820055ce1bf9dd07ecda48210832f96194504;""
db.py;156;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-02 23:53:29+02:00;6f8ce8901e21587cd2320562df412e05b5ab1731;"added frame for object reading, including simple test"
cmd.py;429;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-04 17:30:31+02:00;6fbb69306c0e14bacb8dcb92a89af27d3d5d631f;"Merge branch 'odb'  Conflicts: 	lib/git/cmd.py"
cmd.py;342;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-04 17:30:31+02:00;6fbb69306c0e14bacb8dcb92a89af27d3d5d631f;""
db.py;195;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-04 17:30:31+02:00;6fbb69306c0e14bacb8dcb92a89af27d3d5d631f;""
test_repo.py;146;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-04 17:30:31+02:00;6fbb69306c0e14bacb8dcb92a89af27d3d5d631f;""
test_repo.py;149;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-04 17:30:31+02:00;6fbb69306c0e14bacb8dcb92a89af27d3d5d631f;""
helper.py;182;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-04 23:06:31+02:00;a243827ab3346e188e99db2f9fc1f916941c9b1a;"Implemented stream tests, found a bug on the way, slowly a test-framework for streams starts to show up, but its not yet there"
helper.py;154;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-04 23:06:31+02:00;a243827ab3346e188e99db2f9fc1f916941c9b1a;""
util.py;17;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-06 18:13:21+02:00;b3cde0ee162b8f0cb67da981311c8f9c16050a62;"First step of testing the pool - tasks have been separated into a new module including own tests, their design improved to prepare them for some specifics that would be needed for multiprocessing support"
channel.py;133;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-06 23:08:06+02:00;867129e2950458ab75523b920a5e227e3efa8bbc;"channel.read: enhanced to be sure we don't run into non-atomicity issues related to our channel closed flag, which is the only way not to block forever on read(0) channels which were closed by a thread 'in the meanwhile'"
channel.py;126;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-06 23:08:06+02:00;867129e2950458ab75523b920a5e227e3efa8bbc;""
pool.py;221;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-07 10:38:22+02:00;a8a448b7864e21db46184eab0f0a21d7725d074f;"pool.consumed_tasks: is now a queue to be thread safe, in preparation for multiple connected pools Reduced waiting time in tests to make them complete faster"
pool.py;81;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-07 17:16:48+02:00;edd9e23c766cfd51b3a6f6eee5aac0b791ef2fd0;"added high-speed locking facilities, allowing our Queue to be faster, at least in tests, and with multiple threads. There is still an sync bug in regard to closed channels to be fixed, as the Task.set_done handling is incorrecft"
pool.py;95;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-07 17:16:48+02:00;edd9e23c766cfd51b3a6f6eee5aac0b791ef2fd0;""
pool.py;103;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-07 17:16:48+02:00;edd9e23c766cfd51b3a6f6eee5aac0b791ef2fd0;""
pool.py;81;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-07 19:12:44+02:00;583cd8807259a69fc01874b798f657c1f9ab7828;"Moved pool utilities into util module, fixed critical issue that caused havok - lets call this a safe-state"
pool.py;95;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-07 19:12:44+02:00;583cd8807259a69fc01874b798f657c1f9ab7828;""
pool.py;103;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-07 19:12:44+02:00;583cd8807259a69fc01874b798f657c1f9ab7828;""
util.py;94;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-07 19:12:44+02:00;583cd8807259a69fc01874b798f657c1f9ab7828;""
util.py;108;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-07 19:12:44+02:00;583cd8807259a69fc01874b798f657c1f9ab7828;""
util.py;116;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-07 19:12:44+02:00;583cd8807259a69fc01874b798f657c1f9ab7828;""
channel.py;166;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-08 13:24:44+02:00;3776f7a766851058f6435b9f606b16766425d7ca;"The new channeldesign actually works, but it also shows that its located at the wrong spot. The channel is nothing more than an adapter allowing to read multiple items from a thread-safe queue, the queue itself though must be 'closable' for writing, or needs something like a writable flag."
channel.py;168;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-08 16:47:48+02:00;619c11787742ce00a0ee8f841cec075897873c79;"Its getting better already - intermediate commit before further chaning the task class"
pool.py;316;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-08 17:25:43+02:00;13dd59ba5b3228820841682b59bad6c22476ff66;"task: now deletes itself once its done - for the test this doesn't change a thing as the task deletes itself too late - its time for a paradigm change, the task should be deleted with its RPoolChannel or explicitly by the user. The test needs to adapt, and shouldn't assume anything unless the RPoolChannel is gone"
pool.py;316;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-08 19:26:03+02:00;f78d4a28f307a9d7943a06be9f919304c25ac2d9;"Merge branch 'queue' into async"
util.py;153;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-09 10:34:12+02:00;15941ca090a2c3c987324fc911bbc6f89e941c47;"queue: fixed critical bug in the notify method, as it was not at all thread-safe, causing locks to be released multiple times. Now it runs very fast, and very stable apparently. Now its about putting previous features back in, and studying their results, before more complex task graphs can be examined"
util.py;157;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-09 11:45:25+02:00;a988e6985849e4f6a561b4a5468d525c25ce74fe;"HSCondition: now gets a lock even in the single-notify case, as it was required due to the non-atomiciy of the invovled operation. Removed one level of indirection for the lock, by refraining from calling my own 'wrapper' methods, which brought it back to the performance it had before the locking was introduced for the n==1 case"
util.py;149;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-09 11:45:25+02:00;a988e6985849e4f6a561b4a5468d525c25ce74fe;""
channel.py;200;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-12 12:41:20+02:00;f91495e271597034226f1b9651345091083172c4;"Merge branch 'async'"
util.py;32;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-12 12:41:20+02:00;f91495e271597034226f1b9651345091083172c4;""
util.py;135;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-12 12:41:20+02:00;f91495e271597034226f1b9651345091083172c4;""
util.py;156;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-12 12:41:20+02:00;f91495e271597034226f1b9651345091083172c4;""
channel.py;200;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-12 14:34:09+02:00;86ea63504f3e8a74cfb1d533be9d9602d2d17e27;"Removed async from tree"
util.py;32;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-12 14:34:09+02:00;86ea63504f3e8a74cfb1d533be9d9602d2d17e27;""
util.py;135;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-12 14:34:09+02:00;86ea63504f3e8a74cfb1d533be9d9602d2d17e27;""
util.py;156;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-12 14:34:09+02:00;86ea63504f3e8a74cfb1d533be9d9602d2d17e27;""
db.py;195;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-12 17:20:43+02:00;6c1faef799095f3990e9970bc2cb10aa0221cf9c;"Removed odb from project, it is now used as a submodule named gitdb, which was added instead Adjusted all imports to deal with the changed package names"
index.py;63;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-14 16:04:30+02:00;af32b6e0ad4ab244dc70a5ade0f8a27ab45942f8;"index: split index file into multiple files of a single package. This didn't reduce the file size as much as I would have liked, but certainly is a start for further 'outsourcing'"
index.py;326;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-14 16:04:30+02:00;af32b6e0ad4ab244dc70a5ade0f8a27ab45942f8;""
index.py;778;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-14 16:04:30+02:00;af32b6e0ad4ab244dc70a5ade0f8a27ab45942f8;""
index.py;829;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-14 16:04:30+02:00;af32b6e0ad4ab244dc70a5ade0f8a27ab45942f8;""
base.py;101;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-14 16:04:30+02:00;af32b6e0ad4ab244dc70a5ade0f8a27ab45942f8;""
base.py;546;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-14 16:04:30+02:00;af32b6e0ad4ab244dc70a5ade0f8a27ab45942f8;""
base.py;597;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-14 16:04:30+02:00;af32b6e0ad4ab244dc70a5ade0f8a27ab45942f8;""
util.py;26;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-14 16:04:30+02:00;af32b6e0ad4ab244dc70a5ade0f8a27ab45942f8;""
index.py;63;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-14 17:00:12+02:00;38b3cfb9b24a108e0720f7a3f8d6355f7e0bb1a9;"Merge branch 'index'"
index.py;326;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-14 17:00:12+02:00;38b3cfb9b24a108e0720f7a3f8d6355f7e0bb1a9;""
index.py;778;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-14 17:00:12+02:00;38b3cfb9b24a108e0720f7a3f8d6355f7e0bb1a9;""
index.py;829;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-14 17:00:12+02:00;38b3cfb9b24a108e0720f7a3f8d6355f7e0bb1a9;""
base.py;104;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-14 17:00:12+02:00;38b3cfb9b24a108e0720f7a3f8d6355f7e0bb1a9;""
base.py;561;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-14 17:00:12+02:00;38b3cfb9b24a108e0720f7a3f8d6355f7e0bb1a9;""
base.py;612;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-14 17:00:12+02:00;38b3cfb9b24a108e0720f7a3f8d6355f7e0bb1a9;""
util.py;26;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-14 17:00:12+02:00;38b3cfb9b24a108e0720f7a3f8d6355f7e0bb1a9;""
utils.py;220;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-15 00:32:05+02:00;06590aee389f4466e02407f39af1674366a74705;"Reimplemented Lock handling to be conforming to the git lock protocol, which is actually more efficient than the previous implementation Index now locks its file for reading, and properly uses LockedFD when writing"
base.py;104;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-15 15:18:28+02:00;e837b901dcfac82e864f806c80f4a9cbfdb9c9f3;"Move LazyMixin type to gitdb, index reading now uses file_contents_ro from gitdb as well"
fun.py;82;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-22 21:23:47+02:00;be97c4558992a437cde235aafc7ae2bd6df84ac8;"Initial frame for implementing read_tree using pure python. As git-read-tree can do much more than we can ( and faster assumably ), the .new method is used to create new index instances from up to 3 trees. Implemented multi-tree traversal to facilitate building a stage list more efficiently ( although I am not sure whether it could be faster to use a dictionary together with some intensive lookup ), including test Added performance to learn how fast certain operations are, and whether one should be preferred over another"
fun.py;82;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-23 15:50:14+02:00;57050184f3d962bf91511271af59ee20f3686c3f;"Merge branch 'fromtree'"
refs.py;164;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-25 23:58:24+02:00;47e3138ee978ce708a41f38a0d874376d7ae5c78;"Adjusted all files to (hopefully) deal with the fact that all objects now use 20 byte sha's internally as it is closer to the GitDB implementation Switched all remaining files back to tabs Adjusted all remaining docstrings to suit the sphinx doc convention - its likely that there are many of docstring syntax errors though"
refs.py;486;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-25 23:58:24+02:00;47e3138ee978ce708a41f38a0d874376d7ae5c78;""
refs.py;880;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-25 23:58:24+02:00;47e3138ee978ce708a41f38a0d874376d7ae5c78;""
refs.py;151;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-25 23:58:24+02:00;47e3138ee978ce708a41f38a0d874376d7ae5c78;""
refs.py;495;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-25 23:58:24+02:00;47e3138ee978ce708a41f38a0d874376d7ae5c78;""
refs.py;959;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-25 23:58:24+02:00;47e3138ee978ce708a41f38a0d874376d7ae5c78;""
refs.py;165;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-28 19:16:23+02:00;8d2239f24f6a54d98201413d4f46256df0d6a5f3;"Merge branch 'sha20'"
refs.py;487;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-28 19:16:23+02:00;8d2239f24f6a54d98201413d4f46256df0d6a5f3;""
refs.py;881;ADD;Sebastian Thiel;byronimo@gmail.com;2010-06-28 19:16:23+02:00;8d2239f24f6a54d98201413d4f46256df0d6a5f3;""
refs.py;151;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-28 19:16:23+02:00;8d2239f24f6a54d98201413d4f46256df0d6a5f3;""
refs.py;495;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-28 19:16:23+02:00;8d2239f24f6a54d98201413d4f46256df0d6a5f3;""
refs.py;959;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-06-28 19:16:23+02:00;8d2239f24f6a54d98201413d4f46256df0d6a5f3;""
repo.py;740;ADD;Sebastian Thiel;byronimo@gmail.com;2010-07-06 00:35:30+02:00;f963881e53a9f0a2746a11cb9cdfa82eb1f90d8c;"Initial version of the rev-parse routine, which doesn't work too bad, but its still rather slow and many tests are not yet implemented"
base.py;741;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-07-06 20:21:52+02:00;9059525a75b91e6eb6a425f1edcc608739727168;"Made repo.py a package to allow better localization of functions and utilities - the repo module got rather large"
fun.py;51;ADD;Sebastian Thiel;byronimo@gmail.com;2010-07-06 20:21:52+02:00;9059525a75b91e6eb6a425f1edcc608739727168;""
fun.py;63;ADD;Sebastian Thiel;byronimo@gmail.com;2010-07-07 17:43:36+02:00;ca288d443f4fc9d790eecb6e1cdf82b6cdd8dc0d;"Merge branch 'revparse'"
base.py;1088;ADD;Sebastian Thiel;byronimo@gmail.com;2010-10-27 21:49:46+02:00;0d5bfb5d6d22f8fe8c940f36e1fbe16738965d5f;"index.reset: updated parameter docs, but most importantly, the method now has better testing for the use of paths during reset. The IndexFile now implements this on its own, which also allows for something equivalent to git-reset --hard -- <paths>, which is not possible in the git command for some probably very good reason"
submodule.py;99;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-15 12:13:59+01:00;4d36f8ff4d1274a8815e932285ad6dbd6b2888af;"Improved GitConfigurationParser to better deal with streams and the corresponding locks. Submodule class now operates on parent_commits, the configuration is either streamed from the repository or written directly into a blob ( or file ) dependending on whether we have a working tree checkout or not which matches our parent_commit"
submodule.py;180;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-16 00:18:13+01:00;d4fd7fca515ba9b088a7c811292f76f47d16cd7b;"Submodule now only supports branches to be given as hint that will svn-external like behaviour. Implemented first version of update, which works for now, but probably needs to see more features"
submodule.py;252;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-16 00:18:13+01:00;d4fd7fca515ba9b088a7c811292f76f47d16cd7b;""
submodule.py;428;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-16 17:16:44+01:00;3d061a1a506b71234f783628ba54a7bdf79bbce9;"Implemented deletion of submodules including proper tests"
refs.py;235;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-18 10:40:16+01:00;82849578e61a7dfb47fc76dcbe18b1e3b6a36951;"ORIG_HEAD handling is now implemented in the ref-class itself, instead of being a special case of the commit method; includes tests util: Fixed iterable lists, which broke due to an incorrectly implemented __contains__ method"
refs.py;239;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-18 10:40:16+01:00;82849578e61a7dfb47fc76dcbe18b1e3b6a36951;""
base.py;157;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-18 23:11:32+01:00;f1545bd9cd6953c5b39c488bf7fe179676060499;"Merge branch 'submodule'"
base.py;596;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-18 23:11:32+01:00;f1545bd9cd6953c5b39c488bf7fe179676060499;""
refs.py;235;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-18 23:11:32+01:00;f1545bd9cd6953c5b39c488bf7fe179676060499;""
refs.py;239;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-18 23:11:32+01:00;f1545bd9cd6953c5b39c488bf7fe179676060499;""
refs.py;185;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-23 09:14:17+01:00;dec4663129f72321a14efd6de63f14a7419e3ed2;"Split ref implementation up into multiple files, to make room for the log implementation"
refs.py;235;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-23 09:14:17+01:00;dec4663129f72321a14efd6de63f14a7419e3ed2;""
refs.py;239;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-23 09:14:17+01:00;dec4663129f72321a14efd6de63f14a7419e3ed2;""
refs.py;529;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-23 09:14:17+01:00;dec4663129f72321a14efd6de63f14a7419e3ed2;""
refs.py;1050;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-23 09:14:17+01:00;dec4663129f72321a14efd6de63f14a7419e3ed2;""
remote.py;55;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-23 09:14:17+01:00;dec4663129f72321a14efd6de63f14a7419e3ed2;""
symbolic.py;164;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-23 09:14:17+01:00;dec4663129f72321a14efd6de63f14a7419e3ed2;""
symbolic.py;214;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-23 09:14:17+01:00;dec4663129f72321a14efd6de63f14a7419e3ed2;""
symbolic.py;218;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-23 09:14:17+01:00;dec4663129f72321a14efd6de63f14a7419e3ed2;""
symbolic.py;508;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-23 09:14:17+01:00;dec4663129f72321a14efd6de63f14a7419e3ed2;""
symbolic.py;216;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-23 22:47:34+01:00;61f3db7bd07ac2f3c2ff54615c13bf9219289932;"Removed ORIG_HEAD handling which was downright wrong. ORIG_HEAD gets only set during merge and rebase, and probably everything that changes the ref more drastically. Probably I have to reread that. What needs to be adjusted though is the reflog"
symbolic.py;220;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-23 22:47:34+01:00;61f3db7bd07ac2f3c2ff54615c13bf9219289932;""
refs.py;185;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-24 19:48:59+01:00;3175b5b21194bcc8f4448abe0a03a98d3a4a1360;"Merge branch 'reflog'"
refs.py;235;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-24 19:48:59+01:00;3175b5b21194bcc8f4448abe0a03a98d3a4a1360;""
refs.py;239;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-24 19:48:59+01:00;3175b5b21194bcc8f4448abe0a03a98d3a4a1360;""
refs.py;529;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-24 19:48:59+01:00;3175b5b21194bcc8f4448abe0a03a98d3a4a1360;""
refs.py;1050;DELETED;Sebastian Thiel;byronimo@gmail.com;2010-11-24 19:48:59+01:00;3175b5b21194bcc8f4448abe0a03a98d3a4a1360;""
remote.py;56;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-24 19:48:59+01:00;3175b5b21194bcc8f4448abe0a03a98d3a4a1360;""
symbolic.py;222;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-24 19:48:59+01:00;3175b5b21194bcc8f4448abe0a03a98d3a4a1360;""
symbolic.py;614;ADD;Sebastian Thiel;byronimo@gmail.com;2010-11-24 19:48:59+01:00;3175b5b21194bcc8f4448abe0a03a98d3a4a1360;""
remote.py;418;ADD;Sebastian Thiel;byronimo@gmail.com;2010-12-01 00:18:47+01:00;f631214261a7769c8e6956a51f3d04ebc8ce8efd;"Submodule tests are functional once again. remote: Fixed bug that was caused by the unchecked deletion of an uncached attribute which did not necessarily exist"
remote.py;608;ADD;Sebastian Thiel;byronimo@gmail.com;2010-12-01 00:18:47+01:00;f631214261a7769c8e6956a51f3d04ebc8ce8efd;""
test_remote.py;37;ADD;Sebastian Thiel;byronimo@gmail.com;2011-07-04 20:53:48+02:00;e94df6acd3e22ce0ec7f727076fd9046d96d57b2;"Fixes #23"
test_remote.py;37;DELETED;Sebastian Thiel;byronimo@gmail.com;2011-07-04 20:53:48+02:00;e94df6acd3e22ce0ec7f727076fd9046d96d57b2;""
test_remote.py;37;ADD;Sebastian Thiel;byronimo@gmail.com;2011-07-04 23:26:13+02:00;1ddf05a78475a194ed1aa082d26b3d27ecc77475;"Merge branch 'remote-fixes' into 0.3"
test_remote.py;37;DELETED;Sebastian Thiel;byronimo@gmail.com;2011-07-04 23:26:13+02:00;1ddf05a78475a194ed1aa082d26b3d27ecc77475;""
fun.py;75;ADD;Tim Van Steenburgh;tvansteenburgh@gmail.com;2013-04-17 18:21:53+00:00;f122a6aa3eb386914faa58ef3bf336f27b02fab0;"Return bytes if object name can't be utf8-decoded  Signed-off-by: Tim Van Steenburgh <tvansteenburgh@gmail.com>"
fun.py;75;ADD;Tim Van Steenburgh;tvansteenburgh@gmail.com;2013-04-17 18:43:19+00:00;5869c5c1a51d448a411ae0d51d888793c35db9c0;"Fix whacky indentation  Signed-off-by: Tim Van Steenburgh <tvansteenburgh@gmail.com>"
fun.py;75;DELETED;Tim Van Steenburgh;tvansteenburgh@gmail.com;2013-04-17 18:43:19+00:00;5869c5c1a51d448a411ae0d51d888793c35db9c0;""
cmd.py;448;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;"tabs to 4 spaces - this won't make integrating the patches easier, but it's probably a good idea to go a little more pep8 (and fix sins of my youth ;) )"
cmd.py;448;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
base.py;482;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
base.py;532;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
base.py;1104;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
base.py;482;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
base.py;532;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
base.py;1104;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
util.py;26;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
util.py;26;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
fun.py;97;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
fun.py;97;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
base.py;176;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
base.py;685;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
base.py;176;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
base.py;685;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
remote.py;38;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
remote.py;38;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
symbolic.py;225;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
symbolic.py;621;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
symbolic.py;225;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
symbolic.py;621;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
remote.py;496;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
remote.py;653;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
remote.py;496;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
remote.py;653;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
fun.py;74;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
fun.py;74;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
helper.py;162;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
helper.py;162;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
test_remote.py;37;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
test_remote.py;37;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
test_repo.py;181;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
test_repo.py;181;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
util.py;511;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
util.py;511;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-09 21:09:00+01:00;f573b6840509bf41be822ab7ed79e0a776005133;""
cmd.py;448;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;"Merge branch 'feature/spaces-and-cleanup-0.3' into 0.3  * feature/spaces-and-cleanup-0.3:   Minor modifications to get tests back to work. Two tests are failing in the latest git version, would have to dig into it   Adjusted required versions of pre-requisites, now the majority of the tests work   tabs to 4 spaces - this won't make integrating the patches easier, but it's probably a good idea to go a little more pep8 (and fix sins of my youth ;) )"
cmd.py;448;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
base.py;482;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
base.py;532;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
base.py;1104;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
base.py;482;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
base.py;532;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
base.py;1104;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
util.py;26;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
util.py;26;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
fun.py;97;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
fun.py;97;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
base.py;176;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
base.py;685;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
base.py;176;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
base.py;685;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
remote.py;38;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
remote.py;38;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
symbolic.py;225;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
symbolic.py;621;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
symbolic.py;225;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
symbolic.py;621;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
remote.py;496;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
remote.py;653;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
remote.py;496;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
remote.py;653;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
fun.py;74;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
fun.py;74;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
helper.py;162;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
helper.py;162;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
test_remote.py;37;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
test_remote.py;37;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
test_repo.py;189;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
test_repo.py;181;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
util.py;511;ADD;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
util.py;511;DELETED;Sebastian Thiel;byronimo@gmail.com;2014-02-10 20:11:58+01:00;56d5d0c70cf3a914286fe016030c9edec25c3ae0;""
fun.py;75;ADD;Sebastian Thiel;byronimo@gmail.com;2014-11-15 16:19:24+01:00;ff13922f6cfb11128b7651ddfcbbd5cad67e477f;"Merge branch 'sf-master' of https://github.com/johnsca/GitPython into johnsca-sf-master  Conflicts: 	git/cmd.py 	git/objects/commit.py 	git/objects/fun.py 	git/objects/util.py 	git/remote.py 	git/repo/base.py 	git/test/lib/helper.py 	git/test/test_commit.py 	git/test/test_fun.py 	git/util.py"
fun.py;75;ADD;Sebastian Thiel;byronimo@gmail.com;2014-11-15 16:21:47+01:00;7aba59a2609ec768d5d495dafd23a4bce8179741;"Merge branch 'johnsca-sf-master' into 0.3  Merge all fixes from https://github.com/gitpython-developers/GitPython/pull/134"
lib.py;46;ADD;Sebastian Thiel;byronimo@gmail.com;2015-01-03 19:48:05+01:00;342a0276dbf11366ae91ce28dcceddc332c97eaf;"Fixed all remaining non-performance tests  * travis configuration adjusted to hopefully work better than before  Performance traversal still fails when using git-python as standard repository. It naturally wants a larger one. On travis these tests are skipped though."
lib.py;67;ADD;Sebastian Thiel;byronimo@gmail.com;2015-01-03 19:48:05+01:00;342a0276dbf11366ae91ce28dcceddc332c97eaf;""
remote.py;672;ADD;Sebastian Thiel;byronimo@gmail.com;2015-01-21 18:34:58+01:00;e4d3809161fc54d6913c0c2c7f6a7b51eebe223f;"Added advance usage examples to tutorial and made minor fixes.  GIT_PYTHON_TRACE would actually fail (now) if we debugged archive operations.  Related to #239"
remote.py;494;DELETED;Sebastian Thiel;byronimo@gmail.com;2015-01-21 18:34:58+01:00;e4d3809161fc54d6913c0c2c7f6a7b51eebe223f;""
remote.py;681;DELETED;Sebastian Thiel;byronimo@gmail.com;2015-01-21 18:34:58+01:00;e4d3809161fc54d6913c0c2c7f6a7b51eebe223f;""
cmd.py;623;ADD;Oswin Nathanial;oswin.x.nathanial@sonymobile.com;2015-10-13 11:51:05+09:00;dbbcaf7a355e925911fa77e204dd2c38ee633c0f;"Run os.kill for all child pids even after some of them are down  Right now, we come out of the iteration in case of failure while trying to kill a child pid. This may result in some of the child pids staying alive.  Change-Id: I18d58fcefec2bbdae4ae9bf73594939ade241b52"
cmd.py;624;ADD;Sebastian Thiel;byronimo@gmail.com;2015-10-16 09:42:32+02:00;a929ab29016e91d661274fc3363468eb4a19b4b2;"Merge pull request #354 from dpursehouse/execute-timeout  Include 'timeout' parameter in Git execute"
commit.py;434;ADD;Sebastian Thiel;byronimo@gmail.com;2016-08-21 09:24:23+02:00;31ad0a0e2588819e791f4269a5d7d7e81a67f8cc;"fix(commit): handle gpgsig properly  Assure that gpgsig is not initialized with None to allow the automatic deserialization to kick in.  Fixes #500"
cmd.py;904;DELETED;Kostis Anagnostopoulos;ankostis@gmail.com;2016-09-27 10:59:10+02:00;25a2ebfa684f7ef37a9298c5ded2fc5af190cb42;"Win, #519: Remove `git.cmd` failback - no longer exists.  + Simplify call_process, no win-code case, no `make_call()` nested func. + Del needless WinError try..catch, in `_call_process()` already converted as GitCommandNotFound by `execute()`. + pyism: kw-loop-->comprehension, facilitate debug-stepping"
cmd.py;892;DELETED;Sebastian Thiel;byronimo@gmail.com;2016-10-01 20:42:27+02:00;9d6b417ea3a4507ea78714f0cb7add75b13032d5;"Merge pull request #519 from ankostis/appveyor  Test project on Windows with MINGW/Cygwin git (conda2.7&3.4/cpy-3.5)"
helper.py;244;ADD;Kostis Anagnostopoulos;ankostis@gmail.com;2016-10-02 14:26:15+02:00;8a2f7dce43617b773a6be425ea155812396d3856;"io: Wrap (probably) allconfig_writers in `with` blocks"
helper.py;244;DELETED;Kostis Anagnostopoulos;ankostis@gmail.com;2016-10-02 14:26:15+02:00;8a2f7dce43617b773a6be425ea155812396d3856;""
helper.py;268;ADD;Kostis Anagnostopoulos;ankostis@gmail.com;2016-10-14 11:24:51+02:00;0bce7cc4a43e5843c9f4939db143a9d92bb45a18;"cygwin, #533: FIX daemon launching  + Rework git-daemon launching with `with` resource-management. + cmd: add `is_cygwin` optional override kwd on `Git.polish_url()`. - Cygwin TCs failing:   - PY2: err: 13, fail: 3   - PY3: err: 12, fail: 3"
helper.py;231;DELETED;Kostis Anagnostopoulos;ankostis@gmail.com;2016-10-14 11:24:51+02:00;0bce7cc4a43e5843c9f4939db143a9d92bb45a18;""
fun.py;81;DELETED;Sebastian Thiel;byronimo@gmail.com;2016-10-16 14:34:03+02:00;93d530234a4f5533aa99c3b897bb56d375c2ae60;"fix(unicode): use surrogateescape in bytes.decode  That way, we will try to decode as default encoding (usually utf-8), but allow ourselves to simply keep bytes that don't match within the resulting unicode string.  That way, we allow for lossless decode/encode cycles while still assuring that decoding never fails.  NOTE: I was too lazy to create a test that would verify it, but manually executed https://github.com/petertodd/gitpython-unicode-error.  fixes #532"
fun.py;81;DELETED;Kostis Anagnostopoulos;ankostis@gmail.com;2016-10-16 19:25:20+02:00;ec731f448d304dfe1f9269cc94de405aeb3a0665;"Merge with #532, fix unicode filenames with escapesurogates"
helper.py;267;ADD;Sebastian Thiel;byronimo@gmail.com;2016-10-22 11:11:25+02:00;caa0ea7a0893fe90ea043843d4e6ad407126d7b8;"Merge branch 'cygwin' of https://github.com/ankostis/GitPython into ankostis-cygwin"
helper.py;231;DELETED;Sebastian Thiel;byronimo@gmail.com;2016-10-22 11:11:25+02:00;caa0ea7a0893fe90ea043843d4e6ad407126d7b8;""
cmd.py;838;ADD;Andreas Maier;maiera@de.ibm.com;2016-10-21 11:11:22+02:00;f3d5df2ce3addd9e9e1863f4f33665a16b415b71;"Fixes to support Python 2.6 again.  Details:  - Added Python 2.6 again to .travis.yml (it was removed in commit 4486bcb).  - Replaced the use of dictionary comprehensions in `git/cmd.py` around   line 800 with the code before that change (in commit 25a2ebf).   Reason: dict comprehensions were introduced only in Python 2.7.  - Changed the import source for `SkipTest` and `skipIf` from `unittest.case`   to first trying `unittest` and upon ImportError from `unittest2`.   This was done in `git/util.py` and in several testcases.   Reason: `SkipTest` and `skipIf` were introduced to unittest only   in Python 2.7, and `unittest2` is a backport of `unittest` additions   to Python 2.6.  - In git/test/lib/helper.py, fixed the definition of `assertRaisesRegex`   to work on py26.  - For Python 2.6, added the `unittest2` dependency to `requirements.txt`   and changed `.travis.yml` to install `unittest2`. Because git/util.py   uses SkipTest from unittest/unittest2, the dependency could not be added   to `test-requirements.txt`.  - Fixed an assertion in `git/test/test_index.py` to also allow   a Python 2.6 specific exception message.  - In `is_cygwin_git()` in `git/util.py`, replaced `check_output()` with   `Popen()`. It was added in Python 2.7.  - Enabled Python 2.6 for Windows:    - Added Python 2.6 for MINGW in .appveyor.yml.    - When defining `PROC_CREATIONFLAGS` in `git/cmd.py`, made use of certain     win32 and subprocess flags that were introduced in Python 2.7, dependent     on whether we run on Python 2.7 or higher.    - In `AutoInterrupt.__del__()` in `git/cmd.py`, allowed for `os` not having     `kill()`. `os.kill()` was added for Windows in Python 2.7 (For Linux, it     existed in Python 2.6 already)."
cmd.py;839;ADD;Sebastian Thiel;byronimo@gmail.com;2016-12-08 13:20:52+01:00;2f207e0e15ad243dd24eafce8b60ed2c77d6e725;"Merge pull request #541 from andy-maier/py26_fixes  Fixes to support Python 2.6 again."
cmd.py;839;DELETED;Kostis Anagnostopoulos;ankostis@gmail.com;2016-12-08 14:19:37+01:00;f858c449a993124939e9082dcea796c5a13d0a74;"style(cmd): pythonize cmd-args filtering for PY26, improve docstring  Apply codereview comments of #541."
cmd.py;840;DELETED;Sebastian Thiel;byronimo@gmail.com;2017-02-25 10:32:32+01:00;0181a40db75bb27277bec6e0802f09a45f84ffb3;"Merge pull request #555 from ankostis/cntxtmman  Retrofit `repo` class as context-man to cleanup global mman on repo-delete"
base.py;191;ADD;Sebastian Thiel;byronimo@gmail.com;2017-04-09 15:11:56+02:00;39335e6242c93d5ba75e7ab8d7926f5a49c119a3;"Handle non-deterministic __del__ in Repo  Fixes #610"
fun.py;65;ADD;Peter Jones;pjones@redhat.com;2017-06-26 14:54:28-04:00;aec58a9d386d4199374139cd1fc466826ac3d2cf;"Repo: handle worktrees better  This makes Repo("foo") work when foo/.git is a file of the form created by "git worktree add", i.e. it's a text file that says:  gitdir: /home/me/project/.git/worktrees/bar  and where /home/me/project/.git/ is the nominal gitdir, but /home/me/project/.git/worktrees/bar has this worktree's HEAD etc and a "gitdir" file that contains the path of foo/.git .  Signed-off-by: Peter Jones <pjones@redhat.com>"
cmd.py;219;ADD;Odegard, Ken;ken.odegard@gmail.com;2017-07-09 18:35:47+02:00;a962464c1504d716d4acee7770d8831cd3a84b48;"Preliminary implementation of setup/refresh functions  Added one function (setup) and an alias (refresh simply calls setup). These functions give the developer one more way to configure the git executable path. This also allows the user to interactively adjust the git executable configured during runtime as these functions dynamically update the executable path for the entire git module."
remote.py;229;ADD;Odegard, Ken;ken.odegard@gmail.com;2017-07-09 19:53:38+02:00;feed81ea1a332dc415ea9010c8b5204473a51bdf;"Moved setup function into top level __init__  Discovered that the remote module also relies on the git executable as such it also needs to be “refreshed” anytime the git executable is updated or changed. This was best solved by moving the setup function into the top level __init__ where the setup simply calls git.cmd.Git.refresh and git.remote.FetchInfo.refresh."
remote.py;234;ADD;Odegard, Ken;ken.odegard@gmail.com;2017-07-09 19:53:38+02:00;feed81ea1a332dc415ea9010c8b5204473a51bdf;""
remote.py;41;ADD;Peter Jones;pjones@redhat.com;2017-08-03 17:33:07-04:00;d1c40f46bd547be663b4cd97a80704279708ea8a;"worktrees: make non-packed refs also work correctly.  Turns out aec58a9 did the right thing for /packed/ refs, but didn't work correctly on /unpacked/ refs.  So this patch gives unpacked refs the same treatment.  Without the fix here, the test added will cause this traceback:  ====================================================================== ERROR: Check that we find .git as a worktree file and find the worktree ---------------------------------------------------------------------- Traceback (most recent call last):   File "/home/pjones/devel/github.com/GitPython/git/test/lib/helper.py", line 92, in wrapper     return func(self, path)   File "/home/pjones/devel/github.com/GitPython/git/test/test_repo.py", line 938, in test_git_work_tree_dotgit     self.assertIsInstance(repo.heads['aaaaaaaa'], Head)   File "/home/pjones/devel/github.com/GitPython/git/util.py", line 893, in __getitem__     raise IndexError("No item found with id %r" % (self._prefix + index)) IndexError: No item found with id 'aaaaaaaa'  Woops.  Things I've learned: - test_remote doesn't work currently if you start on a branch.  I think   it never did? - Because of 346424da, all *sorts* of stuff in the test suite doesn't   work if you name your development branch "packed-refs"   (This seems like a bug...)  Signed-off-by: Peter Jones <pjones@redhat.com>"
remote.py;41;ADD;Sebastian Thiel;byronimo@gmail.com;2017-09-28 15:02:53+02:00;a5f034355962c5156f20b4de519aae18478b413a;"Merge pull request #654 from vathpela/worktrees  worktrees: make non-packed refs also work correctly."
remote.py;41;ADD;Sebastian Thiel;byronimo@gmail.com;2017-09-28 15:13:15+02:00;a56136f9cb48a17ae15b59ae0f3f99d9303b1cb1;"Merge branch 'master' into adding_setup_for_git_executable"
remote.py;41;ADD;Sebastian Thiel;byronimo@gmail.com;2017-09-28 15:17:25+02:00;58998fb2dd6a1cad5faffdc36ae536ee6b04e3d2;"Merge branch 'master' into master"
cmd.py;232;ADD;Sebastian Thiel;byronimo@gmail.com;2017-09-28 15:44:15+02:00;2eb6cf0855232da2b8f37785677d1f58c8e86817;"Merge pull request #640 from njalerikson/adding_setup_for_git_executable  Adding setup for git executable"
remote.py;231;ADD;Sebastian Thiel;byronimo@gmail.com;2017-09-28 15:44:15+02:00;2eb6cf0855232da2b8f37785677d1f58c8e86817;""
remote.py;236;ADD;Sebastian Thiel;byronimo@gmail.com;2017-09-28 15:44:15+02:00;2eb6cf0855232da2b8f37785677d1f58c8e86817;""
cmd.py;232;ADD;Sebastian Thiel;byronimo@gmail.com;2017-09-28 15:44:55+02:00;2e482a20ab221cb6eca51f12f1bd29cda4eec484;"Merge branch 'master' into master"
remote.py;231;ADD;Sebastian Thiel;byronimo@gmail.com;2017-09-28 15:44:55+02:00;2e482a20ab221cb6eca51f12f1bd29cda4eec484;""
remote.py;236;ADD;Sebastian Thiel;byronimo@gmail.com;2017-09-28 15:44:55+02:00;2e482a20ab221cb6eca51f12f1bd29cda4eec484;""
