Filename;Linha;Tipo;Autor;Email;Data;Hash;Commit
sqlite_example.py;26;ADD;Forest Gregg;fgregg@uchicago.edu;2013-01-07 23:34:40-06:00;34abd9fd514b21d52d05bb15f9252e6558abf25a;"attaching blocking_map sql actually works now, removed unused functions from sqlite_example, removed clustering from sqlite_example that is in sqlite_clustering"
sqlite_example.py;33;ADD;Derek Eder;derek.eder@gmail.com;2013-01-28 13:12:21-08:00;4381ee5958345b028ee00b77089af2c9087cafaf;"Merge pull request #51 from open-city/sqlite_example  Sqlite example"
sqlite_blocking.py;66;DELETED;Derek Eder;derek.eder@gmail.com;2013-02-25 15:02:36-06:00;29b4b0df4a62d3d86d7fcf3affa66d14ae06b1d7;"minor updates to readme and mysql.cnf, ran PythonTidy on setup.py, removed sqlite_example closes #72"
core.py;200;ADD;Forest Gregg;fgregg@uchicago.edu;2013-03-01 16:54:14-06:00;2f7432b65bd7a91a4441ba0b33d79f9a9934af7d;"allow for missing data, closes #39"
core.py;274;ADD;Forest Gregg;fgregg@uchicago.edu;2013-03-01 16:54:14-06:00;2f7432b65bd7a91a4441ba0b33d79f9a9934af7d;""
core.py;200;ADD;Derek Eder;derek.eder@gmail.com;2013-03-04 08:02:51-08:00;13fbf2b860a561e21f04376032f0fbf53d201f58;"Merge pull request #87 from open-city/missing_data  Missing data"
core.py;274;ADD;Derek Eder;derek.eder@gmail.com;2013-03-04 08:02:51-08:00;13fbf2b860a561e21f04376032f0fbf53d201f58;""
core.py;214;ADD;markhuberty;mark.huberty@gmail.com;2013-03-06 12:22:44-06:00;0f1facbc17b202036c3821ec08e8c5b25ea6dce1;"Merged upstream changes from the master"
core.py;288;ADD;markhuberty;mark.huberty@gmail.com;2013-03-06 12:22:44-06:00;0f1facbc17b202036c3821ec08e8c5b25ea6dce1;""
atomfactory.py;131;ADD;Forest Gregg;fgregg@uchicago.edu;2013-08-07 11:54:47-05:00;1dae69d4ce10421ab09e58e8e31a117469ac4dca;"bundled mekano code"
atomfactory.py;131;ADD;Forest Gregg;fgregg@uchicago.edu;2013-08-07 13:14:34-05:00;9a8e8dcedff21176406ca8ecd16f649761c18e53;"Merge branch 'mekano_spike'"
atomfactory.py;131;ADD;Forest Gregg;fgregg@uchicago.edu;2013-08-07 13:21:59-05:00;1e31538efdc66883ebd6d0ea5cda247589cf0a56;"merge mastering into data_matching"
backport.py;11;ADD;Forest Gregg;fgregg@uchicago.edu;2013-09-13 08:53:57-05:00;289d557a99abb7f8d208cc90a2c979652eafb0ba;"factor out datamodel class"
backport.py;85;ADD;Forest Gregg;fgregg@uchicago.edu;2013-09-13 08:53:57-05:00;289d557a99abb7f8d208cc90a2c979652eafb0ba;""
core.py;238;DELETED;Forest Gregg;fgregg@uchicago.edu;2013-09-13 09:12:08-05:00;1c30a1a79c4c2d6ef3252b3dae90b07ed7bd99c8;"remove ordered dict from core"
core.py;312;DELETED;Forest Gregg;fgregg@uchicago.edu;2013-09-13 09:12:08-05:00;1c30a1a79c4c2d6ef3252b3dae90b07ed7bd99c8;""
backport.py;11;ADD;Forest Gregg;fgregg@uchicago.edu;2013-12-18 11:18:51-06:00;df3df2700302f7ad1a702080db9ec671e393b8fd;"add coverall integration"
backport.py;85;ADD;Forest Gregg;fgregg@uchicago.edu;2013-12-18 11:18:51-06:00;df3df2700302f7ad1a702080db9ec671e393b8fd;""
core.py;255;DELETED;Forest Gregg;fgregg@uchicago.edu;2013-12-18 12:57:07-06:00;4a4e1e343536e071fd53030ac32f9d8a5b08d92e;"move ordered dict out of core.py"
core.py;329;DELETED;Forest Gregg;fgregg@uchicago.edu;2013-12-18 12:57:07-06:00;4a4e1e343536e071fd53030ac32f9d8a5b08d92e;""
backport.py;11;ADD;Forest Gregg;fgregg@uchicago.edu;2014-01-03 10:36:13-06:00;4ad55f1b87c7a104e9b402b2bb6c4e6081b8e877;"merge from development"
backport.py;85;ADD;Forest Gregg;fgregg@uchicago.edu;2014-01-03 10:36:13-06:00;4ad55f1b87c7a104e9b402b2bb6c4e6081b8e877;""
core.py;264;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-01-03 10:36:13-06:00;4ad55f1b87c7a104e9b402b2bb6c4e6081b8e877;""
core.py;338;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-01-03 10:36:13-06:00;4ad55f1b87c7a104e9b402b2bb6c4e6081b8e877;""
core.py;223;ADD;Forest Gregg;fgregg@uchicago.edu;2014-01-04 23:57:45-08:00;18db30dbd8fe0d7c8adff3351bcc8f9a5d5d577c;"Merge pull request #169 from open-city/parallel-new  Parallelization of Dedupe"
core.py;222;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-01-13 19:17:50-06:00;3cc97928cfdfcf809d5eb1b52c79a5a535aa9a4d;"using index from zope"
core.py;222;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-01-14 14:28:13-08:00;bc94dde83062b121c7c6155a2e477f9c00e6de96;"Merge pull request #184 from open-city/better_tfidf  using index from zope"
atomfactory.py;131;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-01-15 08:22:47-06:00;b0489ddfd41d8a1809ef25c3412543cf829f47e9;"remove mekano from development branch"
atomfactory.py;131;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-02-17 20:12:33-06:00;a6fce1adb92d0ae9dd0bcbbf9594f7d7be92bf4d;"Merge pull request #172 from open-city/development  Development Branch"
api.py;57;ADD;Forest Gregg;fgregg@uchicago.edu;2014-07-21 13:03:56-05:00;33eed55d82723095735c08bd42862f3d8ab56798;"remove memmaped file on close of class"
api.py;57;ADD;Forest Gregg;fgregg@uchicago.edu;2014-07-21 13:25:13-05:00;cbffb4ec033269015ad98ff5fb304c125bae0f2b;"Merge pull request #282 from datamade/no_objection  Change dtype from object so we can use numpy.memmap"
api.py;1027;ADD;Forest Gregg;fgregg@uchicago.edu;2014-08-12 11:53:02-05:00;9a79ae333dd89069e31b2f76540a785b08659201;"initial code for search indexing in gazetteer class"
api.py;134;ADD;Forest Gregg;fgregg@uchicago.edu;2014-08-20 12:02:19-05:00;8d26f5600dc3e060a93535f486b7df76792fa0c6;"search and index kidn of work"
api.py;58;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-08-20 12:02:19-05:00;8d26f5600dc3e060a93535f486b7df76792fa0c6;""
predicates.py;85;ADD;Forest Gregg;fgregg@uchicago.edu;2014-08-26 16:49:57-05:00;b5be25cfe1cb05325759d35d3585c9a0a920adc6;"remove tfidfSetPredicate"
blocking.py;67;ADD;Forest Gregg;fgregg@uchicago.edu;2014-08-28 11:25:29-05:00;fd5a4b26341d637757abee03ece046276acce390;"tfidfunindex working"
predicates.py;83;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-08-28 11:25:29-05:00;fd5a4b26341d637757abee03ece046276acce390;""
blocking.py;67;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-08-28 11:45:15-05:00;63b1ea877c580d40385f767655bcc45e81f28f49;"move tfidfindex stuff to tfidf"
tfidf.py;62;ADD;Forest Gregg;fgregg@uchicago.edu;2014-08-28 11:45:15-05:00;63b1ea877c580d40385f767655bcc45e81f28f49;""
api.py;135;ADD;Forest Gregg;fgregg@uchicago.edu;2014-08-28 22:36:42-05:00;d3d73d85b54c11170a0f547c70ff85af9efb4c8c;"Merge pull request #295 from datamade/search  Methods for streaming mode in GazetteMatching"
api.py;1030;ADD;Forest Gregg;fgregg@uchicago.edu;2014-08-28 22:36:42-05:00;d3d73d85b54c11170a0f547c70ff85af9efb4c8c;""
api.py;58;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-08-28 22:36:42-05:00;d3d73d85b54c11170a0f547c70ff85af9efb4c8c;""
tfidf.py;62;ADD;Forest Gregg;fgregg@uchicago.edu;2014-08-28 22:36:42-05:00;d3d73d85b54c11170a0f547c70ff85af9efb4c8c;""
convenience.py;27;ADD;daniel-acuna;daniel.acuna@northwestern.edu;2014-09-16 00:19:53-05:00;d79d9eab69c91487f5775d3933bdc2afbb179f80;"Console labeler adapted for ipython notebook  Active learning through the console labeler (dedupe.consoleLabel) did not work in ipython notebook mode because it used the standard input which only works in console mode. Now it checks if it's inside an ipython notebook, using raw_input when appropriate."
convenience.py;27;DELETED;Daniel Acuna;daniel.acuna@northwestern.edu;2014-09-16 12:06:10-05:00;671f310b74dca3756960db40d02ab1a9954d8c96;"All displaying and inputing in consoleLabel changed to print and raw_input  Also there is a small fix: Now `random.randint` used in `uncertainPairs` matches `numpy.random.randint` behavior used somewhere else. It was sometimes given data indices out of range."
sampling.py;57;ADD;Forest Gregg;fgregg@uchicago.edu;2014-11-04 13:15:28-06:00;cd3e7d6c6b9e39f6f8a617dc23f9f41217085520;"reduce copying of potentially huge objects, tests"
sampling.py;110;ADD;Forest Gregg;fgregg@uchicago.edu;2014-11-04 13:15:28-06:00;cd3e7d6c6b9e39f6f8a617dc23f9f41217085520;""
sampling.py;56;ADD;Forest Gregg;fgregg@uchicago.edu;2014-11-04 13:23:18-06:00;ca9ed6d955e2df2c2f321a93196319ec6e125744;"clean up print statements"
sampling.py;109;ADD;Forest Gregg;fgregg@uchicago.edu;2014-11-04 13:23:18-06:00;ca9ed6d955e2df2c2f321a93196319ec6e125744;""
sampling.py;57;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-11-04 13:23:18-06:00;ca9ed6d955e2df2c2f321a93196319ec6e125744;""
sampling.py;110;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-11-04 13:23:18-06:00;ca9ed6d955e2df2c2f321a93196319ec6e125744;""
fieldclasses.py;37;ADD;Forest Gregg;fgregg@uchicago.edu;2014-11-10 17:27:36-06:00;b7ba3915d0b561fc1d73d907e6660749a9a722ba;"only check for existence of field if has_missing is true"
fieldclasses.py;37;ADD;Forest Gregg;fgregg@uchicago.edu;2014-11-10 17:32:06-06:00;4bc8b373760411021518e967b3626b1e1430930d;"merge master"
tfidf.py;65;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-11-12 11:16:58-06:00;959e91a814d9ee162860a904240a38c90fbaf1c2;"factor out canopyindex"
backport.py;109;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-12-28 23:44:51-06:00;7b1dd5139d72fd50db0df9b8b0423e4c79f53281;"import orderedict"
backport.py;109;DELETED;Forest Gregg;fgregg@uchicago.edu;2014-12-29 13:29:44-05:00;7a2546161e06d79e4f7ebe918353b3b9ed215501;"Merge pull request #326 from datamade/address_type  address type, closes #204"
serializer.py;28;ADD;Forest Gregg;fgregg@uchicago.edu;2015-01-21 13:08:32-06:00;3a26487532959c62bfb39b58295154c7b0d532dd;"hack around simplejson unicode wonkiness"
base.py;24;ADD;Forest Gregg;fgregg@uchicago.edu;2015-02-12 17:31:51-06:00;6372038c1fb4c679aead15ca2f67693b0a6641e5;"finish refactor fo variables, pull out variables into separate files"
fieldclasses.py;37;DELETED;Forest Gregg;fgregg@uchicago.edu;2015-02-12 17:31:51-06:00;6372038c1fb4c679aead15ca2f67693b0a6641e5;""
backport.py;38;DELETED;Forest Gregg;fgregg@uchicago.edu;2015-03-03 08:56:35-06:00;0147c3b7f8fcd428030b4dd108f64db504f0e768;"clean up backport"
serializer.py;29;DELETED;Forest Gregg;fgregg@uchicago.edu;2015-03-03 11:14:30-06:00;54c57ace2f5e0a67a6fdf5f9f50d485c71744cfe;"clean up warning, remove needless try:except"
backport.py;38;DELETED;Forest Gregg;fgregg@uchicago.edu;2015-03-03 11:24:22-06:00;d36e11fc023ab3dbb22887f81621b9111b343748;"Merge pull request #367 from datamade/windows-fixes  CI setup, some small tweaks to work on 32bit windows"
serializer.py;28;DELETED;Forest Gregg;fgregg@uchicago.edu;2015-03-03 11:24:22-06:00;d36e11fc023ab3dbb22887f81621b9111b343748;""
datamodel.py;222;ADD;Forest Gregg;fgregg@uchicago.edu;2015-11-24 10:41:52-06:00;bc51652d162612a942c3b4ad14a7fd5cbd679823;"initial working version"
datamodel.py;219;DELETED;Forest Gregg;fgregg@uchicago.edu;2015-11-24 16:30:38-06:00;ab31f98364bbe8728c9a66f45cf7730ff7529515;"interaction dedupe working too"
api.py;518;ADD;Forest Gregg;fgregg@uchicago.edu;2016-04-15 23:14:16-05:00;c4fd822278a0d3c18007af7790ecd68303a6d721;"_doc_to_ids is pickled"
api.py;523;ADD;Forest Gregg;fgregg@uchicago.edu;2016-04-26 14:31:23-05:00;897e9758a2527923c2c9ef3a2dd7da75d29780c1;"Merge pull request #461 from datamade/alternate-persistence  Persistence of indices, closes #395"
api.py;1085;ADD;Forest Gregg;fgregg@uchicago.edu;2016-04-27 07:33:56-05:00;371837e962752951ed2a0a3a49ad945faa1999ba;"pep8 fixes"
api.py;1095;DELETED;Forest Gregg;fgregg@uchicago.edu;2016-04-27 07:33:56-05:00;371837e962752951ed2a0a3a49ad945faa1999ba;""
api.py;162;ADD;Forest Gregg;fgregg@uchicago.edu;2016-11-11 21:37:59-06:00;8bca395e09ffa9a96aa29b9e6a191a7da3102959;"levenshtein index predicates, closes #436"
api.py;537;ADD;Jochen Brissier;j.brissier@gmail.com;2017-01-12 19:55:52+01:00;51abceb00fade185ebf3526ec1c4f2cfa9581387;"except key error (#511)  e.g. levenshtein indices will not written to file according to line 158"
training.py;517;ADD;Forest Gregg;fgregg@uchicago.edu;2018-06-17 13:22:54-05:00;0421cc23971a324fb9a4185360aeae7a495d22ed;"fallback for _count_elements"
training.py;518;DELETED;Forest Gregg;fgregg@uchicago.edu;2018-06-17 13:50:43-05:00;00c8ba616d75d06c8633c474049cf41c3789c1e0;"defaultdict(int) is faster than count_elements"
